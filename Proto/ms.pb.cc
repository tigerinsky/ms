// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ms.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tis {

namespace {

const ::google::protobuf::Descriptor* UserPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserIndustry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserIndustry_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* CiMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CiMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ms_2eproto() {
  protobuf_AddDesc_ms_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ms.proto");
  GOOGLE_CHECK(file != NULL);
  UserPush_descriptor_ = file->message_type(0);
  static const int UserPush_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPush, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPush, xg_device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPush, ios_device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPush, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPush, uid_),
  };
  UserPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPush_descriptor_,
      UserPush::default_instance_,
      UserPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPush));
  UserIndustry_descriptor_ = file->message_type(1);
  static const int UserIndustry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIndustry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIndustry, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIndustry, industry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIndustry, time_create_),
  };
  UserIndustry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserIndustry_descriptor_,
      UserIndustry::default_instance_,
      UserIndustry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIndustry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIndustry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserIndustry));
  PushConfig_descriptor_ = file->message_type(2);
  static const int PushConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushConfig, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushConfig, config_),
  };
  PushConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushConfig_descriptor_,
      PushConfig::default_instance_,
      PushConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushConfig));
  CiMessage_descriptor_ = file->message_type(3);
  static const int CiMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CiMessage, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CiMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CiMessage, ctime_),
  };
  CiMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CiMessage_descriptor_,
      CiMessage::default_instance_,
      CiMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CiMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CiMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CiMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ms_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPush_descriptor_, &UserPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserIndustry_descriptor_, &UserIndustry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushConfig_descriptor_, &PushConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CiMessage_descriptor_, &CiMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ms_2eproto() {
  delete UserPush::default_instance_;
  delete UserPush_reflection_;
  delete UserIndustry::default_instance_;
  delete UserIndustry_reflection_;
  delete PushConfig::default_instance_;
  delete PushConfig_reflection_;
  delete CiMessage::default_instance_;
  delete CiMessage_reflection_;
}

void protobuf_AddDesc_ms_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010ms.proto\022\003tis\"k\n\010UserPush\022\n\n\002id\030\001 \001(\005\022"
    "\027\n\017xg_device_token\030\002 \001(\t\022\030\n\020ios_device_t"
    "oken\030\003 \001(\t\022\023\n\013device_type\030\004 \001(\005\022\013\n\003uid\030\005"
    " \001(\005\"Q\n\014UserIndustry\022\n\n\002id\030\001 \001(\005\022\013\n\003uid\030"
    "\002 \001(\003\022\023\n\013industry_id\030\003 \001(\005\022\023\n\013time_creat"
    "e\030\004 \001(\005\")\n\nPushConfig\022\013\n\003uid\030\001 \001(\005\022\016\n\006co"
    "nfig\030\002 \001(\t\"8\n\tCiMessage\022\013\n\003mid\030\001 \001(\005\022\017\n\007"
    "content\030\002 \001(\t\022\r\n\005ctime\030\003 \001(\005", 308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ms.proto", &protobuf_RegisterTypes);
  UserPush::default_instance_ = new UserPush();
  UserIndustry::default_instance_ = new UserIndustry();
  PushConfig::default_instance_ = new PushConfig();
  CiMessage::default_instance_ = new CiMessage();
  UserPush::default_instance_->InitAsDefaultInstance();
  UserIndustry::default_instance_->InitAsDefaultInstance();
  PushConfig::default_instance_->InitAsDefaultInstance();
  CiMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ms_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ms_2eproto {
  StaticDescriptorInitializer_ms_2eproto() {
    protobuf_AddDesc_ms_2eproto();
  }
} static_descriptor_initializer_ms_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UserPush::kIdFieldNumber;
const int UserPush::kXgDeviceTokenFieldNumber;
const int UserPush::kIosDeviceTokenFieldNumber;
const int UserPush::kDeviceTypeFieldNumber;
const int UserPush::kUidFieldNumber;
#endif  // !_MSC_VER

UserPush::UserPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tis.UserPush)
}

void UserPush::InitAsDefaultInstance() {
}

UserPush::UserPush(const UserPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tis.UserPush)
}

void UserPush::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  xg_device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ios_device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
  uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPush::~UserPush() {
  // @@protoc_insertion_point(destructor:tis.UserPush)
  SharedDtor();
}

void UserPush::SharedDtor() {
  if (xg_device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xg_device_token_;
  }
  if (ios_device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ios_device_token_;
  }
  if (this != default_instance_) {
  }
}

void UserPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPush_descriptor_;
}

const UserPush& UserPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();
  return *default_instance_;
}

UserPush* UserPush::default_instance_ = NULL;

UserPush* UserPush::New() const {
  return new UserPush;
}

void UserPush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserPush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, device_type_);
    if (has_xg_device_token()) {
      if (xg_device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xg_device_token_->clear();
      }
    }
    if (has_ios_device_token()) {
      if (ios_device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ios_device_token_->clear();
      }
    }
    uid_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tis.UserPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xg_device_token;
        break;
      }

      // optional string xg_device_token = 2;
      case 2: {
        if (tag == 18) {
         parse_xg_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_xg_device_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->xg_device_token().data(), this->xg_device_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xg_device_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ios_device_token;
        break;
      }

      // optional string ios_device_token = 3;
      case 3: {
        if (tag == 26) {
         parse_ios_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ios_device_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ios_device_token().data(), this->ios_device_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ios_device_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_device_type;
        break;
      }

      // optional int32 device_type = 4;
      case 4: {
        if (tag == 32) {
         parse_device_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_type_)));
          set_has_device_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // optional int32 uid = 5;
      case 5: {
        if (tag == 40) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tis.UserPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tis.UserPush)
  return false;
#undef DO_
}

void UserPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tis.UserPush)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string xg_device_token = 2;
  if (has_xg_device_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xg_device_token().data(), this->xg_device_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xg_device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->xg_device_token(), output);
  }

  // optional string ios_device_token = 3;
  if (has_ios_device_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ios_device_token().data(), this->ios_device_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ios_device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ios_device_token(), output);
  }

  // optional int32 device_type = 4;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->device_type(), output);
  }

  // optional int32 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tis.UserPush)
}

::google::protobuf::uint8* UserPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tis.UserPush)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string xg_device_token = 2;
  if (has_xg_device_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->xg_device_token().data(), this->xg_device_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xg_device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->xg_device_token(), target);
  }

  // optional string ios_device_token = 3;
  if (has_ios_device_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ios_device_token().data(), this->ios_device_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ios_device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ios_device_token(), target);
  }

  // optional int32 device_type = 4;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->device_type(), target);
  }

  // optional int32 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tis.UserPush)
  return target;
}

int UserPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string xg_device_token = 2;
    if (has_xg_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->xg_device_token());
    }

    // optional string ios_device_token = 3;
    if (has_ios_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ios_device_token());
    }

    // optional int32 device_type = 4;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_type());
    }

    // optional int32 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPush::MergeFrom(const UserPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_xg_device_token()) {
      set_xg_device_token(from.xg_device_token());
    }
    if (from.has_ios_device_token()) {
      set_ios_device_token(from.ios_device_token());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPush::CopyFrom(const UserPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPush::IsInitialized() const {

  return true;
}

void UserPush::Swap(UserPush* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(xg_device_token_, other->xg_device_token_);
    std::swap(ios_device_token_, other->ios_device_token_);
    std::swap(device_type_, other->device_type_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPush_descriptor_;
  metadata.reflection = UserPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserIndustry::kIdFieldNumber;
const int UserIndustry::kUidFieldNumber;
const int UserIndustry::kIndustryIdFieldNumber;
const int UserIndustry::kTimeCreateFieldNumber;
#endif  // !_MSC_VER

UserIndustry::UserIndustry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tis.UserIndustry)
}

void UserIndustry::InitAsDefaultInstance() {
}

UserIndustry::UserIndustry(const UserIndustry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tis.UserIndustry)
}

void UserIndustry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  industry_id_ = 0;
  time_create_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserIndustry::~UserIndustry() {
  // @@protoc_insertion_point(destructor:tis.UserIndustry)
  SharedDtor();
}

void UserIndustry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserIndustry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserIndustry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserIndustry_descriptor_;
}

const UserIndustry& UserIndustry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();
  return *default_instance_;
}

UserIndustry* UserIndustry::default_instance_ = NULL;

UserIndustry* UserIndustry::New() const {
  return new UserIndustry;
}

void UserIndustry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserIndustry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, time_create_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserIndustry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tis.UserIndustry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional int64 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_industry_id;
        break;
      }

      // optional int32 industry_id = 3;
      case 3: {
        if (tag == 24) {
         parse_industry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &industry_id_)));
          set_has_industry_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time_create;
        break;
      }

      // optional int32 time_create = 4;
      case 4: {
        if (tag == 32) {
         parse_time_create:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_create_)));
          set_has_time_create();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tis.UserIndustry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tis.UserIndustry)
  return false;
#undef DO_
}

void UserIndustry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tis.UserIndustry)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // optional int32 industry_id = 3;
  if (has_industry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->industry_id(), output);
  }

  // optional int32 time_create = 4;
  if (has_time_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time_create(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tis.UserIndustry)
}

::google::protobuf::uint8* UserIndustry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tis.UserIndustry)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // optional int32 industry_id = 3;
  if (has_industry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->industry_id(), target);
  }

  // optional int32 time_create = 4;
  if (has_time_create()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time_create(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tis.UserIndustry)
  return target;
}

int UserIndustry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 industry_id = 3;
    if (has_industry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->industry_id());
    }

    // optional int32 time_create = 4;
    if (has_time_create()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_create());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserIndustry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserIndustry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserIndustry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserIndustry::MergeFrom(const UserIndustry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_industry_id()) {
      set_industry_id(from.industry_id());
    }
    if (from.has_time_create()) {
      set_time_create(from.time_create());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserIndustry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserIndustry::CopyFrom(const UserIndustry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndustry::IsInitialized() const {

  return true;
}

void UserIndustry::Swap(UserIndustry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uid_, other->uid_);
    std::swap(industry_id_, other->industry_id_);
    std::swap(time_create_, other->time_create_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserIndustry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserIndustry_descriptor_;
  metadata.reflection = UserIndustry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushConfig::kUidFieldNumber;
const int PushConfig::kConfigFieldNumber;
#endif  // !_MSC_VER

PushConfig::PushConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tis.PushConfig)
}

void PushConfig::InitAsDefaultInstance() {
}

PushConfig::PushConfig(const PushConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tis.PushConfig)
}

void PushConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushConfig::~PushConfig() {
  // @@protoc_insertion_point(destructor:tis.PushConfig)
  SharedDtor();
}

void PushConfig::SharedDtor() {
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void PushConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushConfig_descriptor_;
}

const PushConfig& PushConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();
  return *default_instance_;
}

PushConfig* PushConfig::default_instance_ = NULL;

PushConfig* PushConfig::New() const {
  return new PushConfig;
}

void PushConfig::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = 0;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tis.PushConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional string config = 2;
      case 2: {
        if (tag == 18) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tis.PushConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tis.PushConfig)
  return false;
#undef DO_
}

void PushConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tis.PushConfig)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tis.PushConfig)
}

::google::protobuf::uint8* PushConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tis.PushConfig)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tis.PushConfig)
  return target;
}

int PushConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushConfig::MergeFrom(const PushConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushConfig::CopyFrom(const PushConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushConfig::IsInitialized() const {

  return true;
}

void PushConfig::Swap(PushConfig* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushConfig_descriptor_;
  metadata.reflection = PushConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CiMessage::kMidFieldNumber;
const int CiMessage::kContentFieldNumber;
const int CiMessage::kCtimeFieldNumber;
#endif  // !_MSC_VER

CiMessage::CiMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tis.CiMessage)
}

void CiMessage::InitAsDefaultInstance() {
}

CiMessage::CiMessage(const CiMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tis.CiMessage)
}

void CiMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CiMessage::~CiMessage() {
  // @@protoc_insertion_point(destructor:tis.CiMessage)
  SharedDtor();
}

void CiMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CiMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CiMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CiMessage_descriptor_;
}

const CiMessage& CiMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ms_2eproto();
  return *default_instance_;
}

CiMessage* CiMessage::default_instance_ = NULL;

CiMessage* CiMessage::New() const {
  return new CiMessage;
}

void CiMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CiMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mid_, ctime_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CiMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tis.CiMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ctime;
        break;
      }

      // optional int32 ctime = 3;
      case 3: {
        if (tag == 24) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tis.CiMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tis.CiMessage)
  return false;
#undef DO_
}

void CiMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tis.CiMessage)
  // optional int32 mid = 1;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mid(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional int32 ctime = 3;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ctime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tis.CiMessage)
}

::google::protobuf::uint8* CiMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tis.CiMessage)
  // optional int32 mid = 1;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mid(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional int32 ctime = 3;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ctime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tis.CiMessage)
  return target;
}

int CiMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mid = 1;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 ctime = 3;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CiMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CiMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CiMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CiMessage::MergeFrom(const CiMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CiMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CiMessage::CopyFrom(const CiMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CiMessage::IsInitialized() const {

  return true;
}

void CiMessage::Swap(CiMessage* other) {
  if (other != this) {
    std::swap(mid_, other->mid_);
    std::swap(content_, other->content_);
    std::swap(ctime_, other->ctime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CiMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CiMessage_descriptor_;
  metadata.reflection = CiMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tis

// @@protoc_insertion_point(global_scope)
