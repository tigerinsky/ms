// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ms.proto

#ifndef PROTOBUF_ms_2eproto__INCLUDED
#define PROTOBUF_ms_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tis {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ms_2eproto();
void protobuf_AssignDesc_ms_2eproto();
void protobuf_ShutdownFile_ms_2eproto();

class UserPush;
class UserIndustry;
class PushConfig;
class CiMessage;

// ===================================================================

class UserPush : public ::google::protobuf::Message {
 public:
  UserPush();
  virtual ~UserPush();

  UserPush(const UserPush& from);

  inline UserPush& operator=(const UserPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPush& default_instance();

  void Swap(UserPush* other);

  // implements Message ----------------------------------------------

  UserPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPush& from);
  void MergeFrom(const UserPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string xg_device_token = 2;
  inline bool has_xg_device_token() const;
  inline void clear_xg_device_token();
  static const int kXgDeviceTokenFieldNumber = 2;
  inline const ::std::string& xg_device_token() const;
  inline void set_xg_device_token(const ::std::string& value);
  inline void set_xg_device_token(const char* value);
  inline void set_xg_device_token(const char* value, size_t size);
  inline ::std::string* mutable_xg_device_token();
  inline ::std::string* release_xg_device_token();
  inline void set_allocated_xg_device_token(::std::string* xg_device_token);

  // optional string ios_device_token = 3;
  inline bool has_ios_device_token() const;
  inline void clear_ios_device_token();
  static const int kIosDeviceTokenFieldNumber = 3;
  inline const ::std::string& ios_device_token() const;
  inline void set_ios_device_token(const ::std::string& value);
  inline void set_ios_device_token(const char* value);
  inline void set_ios_device_token(const char* value, size_t size);
  inline ::std::string* mutable_ios_device_token();
  inline ::std::string* release_ios_device_token();
  inline void set_allocated_ios_device_token(::std::string* ios_device_token);

  // optional int32 device_type = 4;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 4;
  inline ::google::protobuf::int32 device_type() const;
  inline void set_device_type(::google::protobuf::int32 value);

  // optional int32 uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tis.UserPush)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_xg_device_token();
  inline void clear_has_xg_device_token();
  inline void set_has_ios_device_token();
  inline void clear_has_ios_device_token();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* xg_device_token_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 device_type_;
  ::std::string* ios_device_token_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_ms_2eproto();
  friend void protobuf_AssignDesc_ms_2eproto();
  friend void protobuf_ShutdownFile_ms_2eproto();

  void InitAsDefaultInstance();
  static UserPush* default_instance_;
};
// -------------------------------------------------------------------

class UserIndustry : public ::google::protobuf::Message {
 public:
  UserIndustry();
  virtual ~UserIndustry();

  UserIndustry(const UserIndustry& from);

  inline UserIndustry& operator=(const UserIndustry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserIndustry& default_instance();

  void Swap(UserIndustry* other);

  // implements Message ----------------------------------------------

  UserIndustry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserIndustry& from);
  void MergeFrom(const UserIndustry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional int32 industry_id = 3;
  inline bool has_industry_id() const;
  inline void clear_industry_id();
  static const int kIndustryIdFieldNumber = 3;
  inline ::google::protobuf::int32 industry_id() const;
  inline void set_industry_id(::google::protobuf::int32 value);

  // optional int32 time_create = 4;
  inline bool has_time_create() const;
  inline void clear_time_create();
  static const int kTimeCreateFieldNumber = 4;
  inline ::google::protobuf::int32 time_create() const;
  inline void set_time_create(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tis.UserIndustry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_industry_id();
  inline void clear_has_industry_id();
  inline void set_has_time_create();
  inline void clear_has_time_create();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 industry_id_;
  ::google::protobuf::int32 time_create_;
  friend void  protobuf_AddDesc_ms_2eproto();
  friend void protobuf_AssignDesc_ms_2eproto();
  friend void protobuf_ShutdownFile_ms_2eproto();

  void InitAsDefaultInstance();
  static UserIndustry* default_instance_;
};
// -------------------------------------------------------------------

class PushConfig : public ::google::protobuf::Message {
 public:
  PushConfig();
  virtual ~PushConfig();

  PushConfig(const PushConfig& from);

  inline PushConfig& operator=(const PushConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushConfig& default_instance();

  void Swap(PushConfig* other);

  // implements Message ----------------------------------------------

  PushConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushConfig& from);
  void MergeFrom(const PushConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional string config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::std::string& config() const;
  inline void set_config(const ::std::string& value);
  inline void set_config(const char* value);
  inline void set_config(const char* value, size_t size);
  inline ::std::string* mutable_config();
  inline ::std::string* release_config();
  inline void set_allocated_config(::std::string* config);

  // @@protoc_insertion_point(class_scope:tis.PushConfig)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* config_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_ms_2eproto();
  friend void protobuf_AssignDesc_ms_2eproto();
  friend void protobuf_ShutdownFile_ms_2eproto();

  void InitAsDefaultInstance();
  static PushConfig* default_instance_;
};
// -------------------------------------------------------------------

class CiMessage : public ::google::protobuf::Message {
 public:
  CiMessage();
  virtual ~CiMessage();

  CiMessage(const CiMessage& from);

  inline CiMessage& operator=(const CiMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CiMessage& default_instance();

  void Swap(CiMessage* other);

  // implements Message ----------------------------------------------

  CiMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CiMessage& from);
  void MergeFrom(const CiMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mid = 1;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  inline ::google::protobuf::int32 mid() const;
  inline void set_mid(::google::protobuf::int32 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 ctime = 3;
  inline bool has_ctime() const;
  inline void clear_ctime();
  static const int kCtimeFieldNumber = 3;
  inline ::google::protobuf::int32 ctime() const;
  inline void set_ctime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tis.CiMessage)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_ctime();
  inline void clear_has_ctime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::google::protobuf::int32 mid_;
  ::google::protobuf::int32 ctime_;
  friend void  protobuf_AddDesc_ms_2eproto();
  friend void protobuf_AssignDesc_ms_2eproto();
  friend void protobuf_ShutdownFile_ms_2eproto();

  void InitAsDefaultInstance();
  static CiMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// UserPush

// optional int32 id = 1;
inline bool UserPush::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPush::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPush::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPush::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserPush::id() const {
  // @@protoc_insertion_point(field_get:tis.UserPush.id)
  return id_;
}
inline void UserPush::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tis.UserPush.id)
}

// optional string xg_device_token = 2;
inline bool UserPush::has_xg_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPush::set_has_xg_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPush::clear_has_xg_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPush::clear_xg_device_token() {
  if (xg_device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xg_device_token_->clear();
  }
  clear_has_xg_device_token();
}
inline const ::std::string& UserPush::xg_device_token() const {
  // @@protoc_insertion_point(field_get:tis.UserPush.xg_device_token)
  return *xg_device_token_;
}
inline void UserPush::set_xg_device_token(const ::std::string& value) {
  set_has_xg_device_token();
  if (xg_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xg_device_token_ = new ::std::string;
  }
  xg_device_token_->assign(value);
  // @@protoc_insertion_point(field_set:tis.UserPush.xg_device_token)
}
inline void UserPush::set_xg_device_token(const char* value) {
  set_has_xg_device_token();
  if (xg_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xg_device_token_ = new ::std::string;
  }
  xg_device_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:tis.UserPush.xg_device_token)
}
inline void UserPush::set_xg_device_token(const char* value, size_t size) {
  set_has_xg_device_token();
  if (xg_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xg_device_token_ = new ::std::string;
  }
  xg_device_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tis.UserPush.xg_device_token)
}
inline ::std::string* UserPush::mutable_xg_device_token() {
  set_has_xg_device_token();
  if (xg_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xg_device_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tis.UserPush.xg_device_token)
  return xg_device_token_;
}
inline ::std::string* UserPush::release_xg_device_token() {
  clear_has_xg_device_token();
  if (xg_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xg_device_token_;
    xg_device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserPush::set_allocated_xg_device_token(::std::string* xg_device_token) {
  if (xg_device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xg_device_token_;
  }
  if (xg_device_token) {
    set_has_xg_device_token();
    xg_device_token_ = xg_device_token;
  } else {
    clear_has_xg_device_token();
    xg_device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tis.UserPush.xg_device_token)
}

// optional string ios_device_token = 3;
inline bool UserPush::has_ios_device_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPush::set_has_ios_device_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPush::clear_has_ios_device_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPush::clear_ios_device_token() {
  if (ios_device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_device_token_->clear();
  }
  clear_has_ios_device_token();
}
inline const ::std::string& UserPush::ios_device_token() const {
  // @@protoc_insertion_point(field_get:tis.UserPush.ios_device_token)
  return *ios_device_token_;
}
inline void UserPush::set_ios_device_token(const ::std::string& value) {
  set_has_ios_device_token();
  if (ios_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_device_token_ = new ::std::string;
  }
  ios_device_token_->assign(value);
  // @@protoc_insertion_point(field_set:tis.UserPush.ios_device_token)
}
inline void UserPush::set_ios_device_token(const char* value) {
  set_has_ios_device_token();
  if (ios_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_device_token_ = new ::std::string;
  }
  ios_device_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:tis.UserPush.ios_device_token)
}
inline void UserPush::set_ios_device_token(const char* value, size_t size) {
  set_has_ios_device_token();
  if (ios_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_device_token_ = new ::std::string;
  }
  ios_device_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tis.UserPush.ios_device_token)
}
inline ::std::string* UserPush::mutable_ios_device_token() {
  set_has_ios_device_token();
  if (ios_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ios_device_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tis.UserPush.ios_device_token)
  return ios_device_token_;
}
inline ::std::string* UserPush::release_ios_device_token() {
  clear_has_ios_device_token();
  if (ios_device_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ios_device_token_;
    ios_device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserPush::set_allocated_ios_device_token(::std::string* ios_device_token) {
  if (ios_device_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ios_device_token_;
  }
  if (ios_device_token) {
    set_has_ios_device_token();
    ios_device_token_ = ios_device_token;
  } else {
    clear_has_ios_device_token();
    ios_device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tis.UserPush.ios_device_token)
}

// optional int32 device_type = 4;
inline bool UserPush::has_device_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserPush::set_has_device_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserPush::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserPush::clear_device_type() {
  device_type_ = 0;
  clear_has_device_type();
}
inline ::google::protobuf::int32 UserPush::device_type() const {
  // @@protoc_insertion_point(field_get:tis.UserPush.device_type)
  return device_type_;
}
inline void UserPush::set_device_type(::google::protobuf::int32 value) {
  set_has_device_type();
  device_type_ = value;
  // @@protoc_insertion_point(field_set:tis.UserPush.device_type)
}

// optional int32 uid = 5;
inline bool UserPush::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserPush::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserPush::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserPush::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 UserPush::uid() const {
  // @@protoc_insertion_point(field_get:tis.UserPush.uid)
  return uid_;
}
inline void UserPush::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:tis.UserPush.uid)
}

// -------------------------------------------------------------------

// UserIndustry

// optional int32 id = 1;
inline bool UserIndustry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserIndustry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserIndustry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserIndustry::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserIndustry::id() const {
  // @@protoc_insertion_point(field_get:tis.UserIndustry.id)
  return id_;
}
inline void UserIndustry::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tis.UserIndustry.id)
}

// optional int64 uid = 2;
inline bool UserIndustry::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserIndustry::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserIndustry::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserIndustry::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 UserIndustry::uid() const {
  // @@protoc_insertion_point(field_get:tis.UserIndustry.uid)
  return uid_;
}
inline void UserIndustry::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:tis.UserIndustry.uid)
}

// optional int32 industry_id = 3;
inline bool UserIndustry::has_industry_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserIndustry::set_has_industry_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserIndustry::clear_has_industry_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserIndustry::clear_industry_id() {
  industry_id_ = 0;
  clear_has_industry_id();
}
inline ::google::protobuf::int32 UserIndustry::industry_id() const {
  // @@protoc_insertion_point(field_get:tis.UserIndustry.industry_id)
  return industry_id_;
}
inline void UserIndustry::set_industry_id(::google::protobuf::int32 value) {
  set_has_industry_id();
  industry_id_ = value;
  // @@protoc_insertion_point(field_set:tis.UserIndustry.industry_id)
}

// optional int32 time_create = 4;
inline bool UserIndustry::has_time_create() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserIndustry::set_has_time_create() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserIndustry::clear_has_time_create() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserIndustry::clear_time_create() {
  time_create_ = 0;
  clear_has_time_create();
}
inline ::google::protobuf::int32 UserIndustry::time_create() const {
  // @@protoc_insertion_point(field_get:tis.UserIndustry.time_create)
  return time_create_;
}
inline void UserIndustry::set_time_create(::google::protobuf::int32 value) {
  set_has_time_create();
  time_create_ = value;
  // @@protoc_insertion_point(field_set:tis.UserIndustry.time_create)
}

// -------------------------------------------------------------------

// PushConfig

// optional int32 uid = 1;
inline bool PushConfig::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushConfig::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushConfig::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushConfig::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 PushConfig::uid() const {
  // @@protoc_insertion_point(field_get:tis.PushConfig.uid)
  return uid_;
}
inline void PushConfig::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:tis.PushConfig.uid)
}

// optional string config = 2;
inline bool PushConfig::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushConfig::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushConfig::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushConfig::clear_config() {
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_->clear();
  }
  clear_has_config();
}
inline const ::std::string& PushConfig::config() const {
  // @@protoc_insertion_point(field_get:tis.PushConfig.config)
  return *config_;
}
inline void PushConfig::set_config(const ::std::string& value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
  // @@protoc_insertion_point(field_set:tis.PushConfig.config)
}
inline void PushConfig::set_config(const char* value) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(value);
  // @@protoc_insertion_point(field_set_char:tis.PushConfig.config)
}
inline void PushConfig::set_config(const char* value, size_t size) {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  config_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tis.PushConfig.config)
}
inline ::std::string* PushConfig::mutable_config() {
  set_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    config_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tis.PushConfig.config)
  return config_;
}
inline ::std::string* PushConfig::release_config() {
  clear_has_config();
  if (config_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = config_;
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushConfig::set_allocated_config(::std::string* config) {
  if (config_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_;
  }
  if (config) {
    set_has_config();
    config_ = config;
  } else {
    clear_has_config();
    config_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tis.PushConfig.config)
}

// -------------------------------------------------------------------

// CiMessage

// optional int32 mid = 1;
inline bool CiMessage::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CiMessage::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CiMessage::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CiMessage::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline ::google::protobuf::int32 CiMessage::mid() const {
  // @@protoc_insertion_point(field_get:tis.CiMessage.mid)
  return mid_;
}
inline void CiMessage::set_mid(::google::protobuf::int32 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:tis.CiMessage.mid)
}

// optional string content = 2;
inline bool CiMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CiMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CiMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CiMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CiMessage::content() const {
  // @@protoc_insertion_point(field_get:tis.CiMessage.content)
  return *content_;
}
inline void CiMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:tis.CiMessage.content)
}
inline void CiMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:tis.CiMessage.content)
}
inline void CiMessage::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tis.CiMessage.content)
}
inline ::std::string* CiMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:tis.CiMessage.content)
  return content_;
}
inline ::std::string* CiMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CiMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:tis.CiMessage.content)
}

// optional int32 ctime = 3;
inline bool CiMessage::has_ctime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CiMessage::set_has_ctime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CiMessage::clear_has_ctime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CiMessage::clear_ctime() {
  ctime_ = 0;
  clear_has_ctime();
}
inline ::google::protobuf::int32 CiMessage::ctime() const {
  // @@protoc_insertion_point(field_get:tis.CiMessage.ctime)
  return ctime_;
}
inline void CiMessage::set_ctime(::google::protobuf::int32 value) {
  set_has_ctime();
  ctime_ = value;
  // @@protoc_insertion_point(field_set:tis.CiMessage.ctime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tis

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ms_2eproto__INCLUDED
