/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MessageServer_H
#define MessageServer_H

#include <thrift/TDispatchProcessor.h>
#include "system_message_types.h"

namespace tis {

class MessageServerIf {
 public:
  virtual ~MessageServerIf() {}
  virtual void send_system_msg(const SystemMessage& sMsg) = 0;
  virtual void set_read(const int32_t sMsgId) = 0;
  virtual void set_delete(const int32_t sMsgId) = 0;
  virtual void clear_red_by_uid(const int32_t uid, const int32_t mType, const int32_t num) = 0;
  virtual void new_tweet_notify(const NewTweetNotifyRequest& request) = 0;
  virtual void notice_notify(const NoticeRequest& request) = 0;
  virtual void new_friend_notify(const NewFriendRequest& request) = 0;
  virtual void update_config(const int32_t key, const std::string& value) = 0;
  virtual int32_t get_num(const int32_t uid, const int32_t queue_type) = 0;
};

class MessageServerIfFactory {
 public:
  typedef MessageServerIf Handler;

  virtual ~MessageServerIfFactory() {}

  virtual MessageServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MessageServerIf* /* handler */) = 0;
};

class MessageServerIfSingletonFactory : virtual public MessageServerIfFactory {
 public:
  MessageServerIfSingletonFactory(const boost::shared_ptr<MessageServerIf>& iface) : iface_(iface) {}
  virtual ~MessageServerIfSingletonFactory() {}

  virtual MessageServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MessageServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<MessageServerIf> iface_;
};

class MessageServerNull : virtual public MessageServerIf {
 public:
  virtual ~MessageServerNull() {}
  void send_system_msg(const SystemMessage& /* sMsg */) {
    return;
  }
  void set_read(const int32_t /* sMsgId */) {
    return;
  }
  void set_delete(const int32_t /* sMsgId */) {
    return;
  }
  void clear_red_by_uid(const int32_t /* uid */, const int32_t /* mType */, const int32_t /* num */) {
    return;
  }
  void new_tweet_notify(const NewTweetNotifyRequest& /* request */) {
    return;
  }
  void notice_notify(const NoticeRequest& /* request */) {
    return;
  }
  void new_friend_notify(const NewFriendRequest& /* request */) {
    return;
  }
  void update_config(const int32_t /* key */, const std::string& /* value */) {
    return;
  }
  int32_t get_num(const int32_t /* uid */, const int32_t /* queue_type */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _MessageServer_send_system_msg_args__isset {
  _MessageServer_send_system_msg_args__isset() : sMsg(false) {}
  bool sMsg :1;
} _MessageServer_send_system_msg_args__isset;

class MessageServer_send_system_msg_args {
 public:

  static const char* ascii_fingerprint; // = "D39EFC958C2EB0CF5D7C4CA4B4044BE2";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x9E,0xFC,0x95,0x8C,0x2E,0xB0,0xCF,0x5D,0x7C,0x4C,0xA4,0xB4,0x04,0x4B,0xE2};

  MessageServer_send_system_msg_args(const MessageServer_send_system_msg_args&);
  MessageServer_send_system_msg_args& operator=(const MessageServer_send_system_msg_args&);
  MessageServer_send_system_msg_args() {
  }

  virtual ~MessageServer_send_system_msg_args() throw();
  SystemMessage sMsg;

  _MessageServer_send_system_msg_args__isset __isset;

  void __set_sMsg(const SystemMessage& val);

  bool operator == (const MessageServer_send_system_msg_args & rhs) const
  {
    if (!(sMsg == rhs.sMsg))
      return false;
    return true;
  }
  bool operator != (const MessageServer_send_system_msg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_send_system_msg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_send_system_msg_args& obj);
};


class MessageServer_send_system_msg_pargs {
 public:

  static const char* ascii_fingerprint; // = "D39EFC958C2EB0CF5D7C4CA4B4044BE2";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x9E,0xFC,0x95,0x8C,0x2E,0xB0,0xCF,0x5D,0x7C,0x4C,0xA4,0xB4,0x04,0x4B,0xE2};


  virtual ~MessageServer_send_system_msg_pargs() throw();
  const SystemMessage* sMsg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_send_system_msg_pargs& obj);
};


class MessageServer_send_system_msg_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageServer_send_system_msg_result(const MessageServer_send_system_msg_result&);
  MessageServer_send_system_msg_result& operator=(const MessageServer_send_system_msg_result&);
  MessageServer_send_system_msg_result() {
  }

  virtual ~MessageServer_send_system_msg_result() throw();

  bool operator == (const MessageServer_send_system_msg_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageServer_send_system_msg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_send_system_msg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_send_system_msg_result& obj);
};


class MessageServer_send_system_msg_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MessageServer_send_system_msg_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_send_system_msg_presult& obj);
};

typedef struct _MessageServer_set_read_args__isset {
  _MessageServer_set_read_args__isset() : sMsgId(false) {}
  bool sMsgId :1;
} _MessageServer_set_read_args__isset;

class MessageServer_set_read_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageServer_set_read_args(const MessageServer_set_read_args&);
  MessageServer_set_read_args& operator=(const MessageServer_set_read_args&);
  MessageServer_set_read_args() : sMsgId(0) {
  }

  virtual ~MessageServer_set_read_args() throw();
  int32_t sMsgId;

  _MessageServer_set_read_args__isset __isset;

  void __set_sMsgId(const int32_t val);

  bool operator == (const MessageServer_set_read_args & rhs) const
  {
    if (!(sMsgId == rhs.sMsgId))
      return false;
    return true;
  }
  bool operator != (const MessageServer_set_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_set_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_set_read_args& obj);
};


class MessageServer_set_read_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~MessageServer_set_read_pargs() throw();
  const int32_t* sMsgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_set_read_pargs& obj);
};


class MessageServer_set_read_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageServer_set_read_result(const MessageServer_set_read_result&);
  MessageServer_set_read_result& operator=(const MessageServer_set_read_result&);
  MessageServer_set_read_result() {
  }

  virtual ~MessageServer_set_read_result() throw();

  bool operator == (const MessageServer_set_read_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageServer_set_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_set_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_set_read_result& obj);
};


class MessageServer_set_read_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MessageServer_set_read_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_set_read_presult& obj);
};

typedef struct _MessageServer_set_delete_args__isset {
  _MessageServer_set_delete_args__isset() : sMsgId(false) {}
  bool sMsgId :1;
} _MessageServer_set_delete_args__isset;

class MessageServer_set_delete_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  MessageServer_set_delete_args(const MessageServer_set_delete_args&);
  MessageServer_set_delete_args& operator=(const MessageServer_set_delete_args&);
  MessageServer_set_delete_args() : sMsgId(0) {
  }

  virtual ~MessageServer_set_delete_args() throw();
  int32_t sMsgId;

  _MessageServer_set_delete_args__isset __isset;

  void __set_sMsgId(const int32_t val);

  bool operator == (const MessageServer_set_delete_args & rhs) const
  {
    if (!(sMsgId == rhs.sMsgId))
      return false;
    return true;
  }
  bool operator != (const MessageServer_set_delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_set_delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_set_delete_args& obj);
};


class MessageServer_set_delete_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~MessageServer_set_delete_pargs() throw();
  const int32_t* sMsgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_set_delete_pargs& obj);
};


class MessageServer_set_delete_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageServer_set_delete_result(const MessageServer_set_delete_result&);
  MessageServer_set_delete_result& operator=(const MessageServer_set_delete_result&);
  MessageServer_set_delete_result() {
  }

  virtual ~MessageServer_set_delete_result() throw();

  bool operator == (const MessageServer_set_delete_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageServer_set_delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_set_delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_set_delete_result& obj);
};


class MessageServer_set_delete_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MessageServer_set_delete_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_set_delete_presult& obj);
};

typedef struct _MessageServer_clear_red_by_uid_args__isset {
  _MessageServer_clear_red_by_uid_args__isset() : uid(false), mType(false), num(true) {}
  bool uid :1;
  bool mType :1;
  bool num :1;
} _MessageServer_clear_red_by_uid_args__isset;

class MessageServer_clear_red_by_uid_args {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  MessageServer_clear_red_by_uid_args(const MessageServer_clear_red_by_uid_args&);
  MessageServer_clear_red_by_uid_args& operator=(const MessageServer_clear_red_by_uid_args&);
  MessageServer_clear_red_by_uid_args() : uid(0), mType(0), num(0) {
  }

  virtual ~MessageServer_clear_red_by_uid_args() throw();
  int32_t uid;
  int32_t mType;
  int32_t num;

  _MessageServer_clear_red_by_uid_args__isset __isset;

  void __set_uid(const int32_t val);

  void __set_mType(const int32_t val);

  void __set_num(const int32_t val);

  bool operator == (const MessageServer_clear_red_by_uid_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(mType == rhs.mType))
      return false;
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const MessageServer_clear_red_by_uid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_clear_red_by_uid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_clear_red_by_uid_args& obj);
};


class MessageServer_clear_red_by_uid_pargs {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};


  virtual ~MessageServer_clear_red_by_uid_pargs() throw();
  const int32_t* uid;
  const int32_t* mType;
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_clear_red_by_uid_pargs& obj);
};


class MessageServer_clear_red_by_uid_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageServer_clear_red_by_uid_result(const MessageServer_clear_red_by_uid_result&);
  MessageServer_clear_red_by_uid_result& operator=(const MessageServer_clear_red_by_uid_result&);
  MessageServer_clear_red_by_uid_result() {
  }

  virtual ~MessageServer_clear_red_by_uid_result() throw();

  bool operator == (const MessageServer_clear_red_by_uid_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageServer_clear_red_by_uid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_clear_red_by_uid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_clear_red_by_uid_result& obj);
};


class MessageServer_clear_red_by_uid_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MessageServer_clear_red_by_uid_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_clear_red_by_uid_presult& obj);
};

typedef struct _MessageServer_new_tweet_notify_args__isset {
  _MessageServer_new_tweet_notify_args__isset() : request(false) {}
  bool request :1;
} _MessageServer_new_tweet_notify_args__isset;

class MessageServer_new_tweet_notify_args {
 public:

  static const char* ascii_fingerprint; // = "42D93861C574A24E231AE293BED09726";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0xD9,0x38,0x61,0xC5,0x74,0xA2,0x4E,0x23,0x1A,0xE2,0x93,0xBE,0xD0,0x97,0x26};

  MessageServer_new_tweet_notify_args(const MessageServer_new_tweet_notify_args&);
  MessageServer_new_tweet_notify_args& operator=(const MessageServer_new_tweet_notify_args&);
  MessageServer_new_tweet_notify_args() {
  }

  virtual ~MessageServer_new_tweet_notify_args() throw();
  NewTweetNotifyRequest request;

  _MessageServer_new_tweet_notify_args__isset __isset;

  void __set_request(const NewTweetNotifyRequest& val);

  bool operator == (const MessageServer_new_tweet_notify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const MessageServer_new_tweet_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_new_tweet_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_new_tweet_notify_args& obj);
};


class MessageServer_new_tweet_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "42D93861C574A24E231AE293BED09726";
  static const uint8_t binary_fingerprint[16]; // = {0x42,0xD9,0x38,0x61,0xC5,0x74,0xA2,0x4E,0x23,0x1A,0xE2,0x93,0xBE,0xD0,0x97,0x26};


  virtual ~MessageServer_new_tweet_notify_pargs() throw();
  const NewTweetNotifyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_new_tweet_notify_pargs& obj);
};


class MessageServer_new_tweet_notify_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageServer_new_tweet_notify_result(const MessageServer_new_tweet_notify_result&);
  MessageServer_new_tweet_notify_result& operator=(const MessageServer_new_tweet_notify_result&);
  MessageServer_new_tweet_notify_result() {
  }

  virtual ~MessageServer_new_tweet_notify_result() throw();

  bool operator == (const MessageServer_new_tweet_notify_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageServer_new_tweet_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_new_tweet_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_new_tweet_notify_result& obj);
};


class MessageServer_new_tweet_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MessageServer_new_tweet_notify_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_new_tweet_notify_presult& obj);
};

typedef struct _MessageServer_notice_notify_args__isset {
  _MessageServer_notice_notify_args__isset() : request(false) {}
  bool request :1;
} _MessageServer_notice_notify_args__isset;

class MessageServer_notice_notify_args {
 public:

  static const char* ascii_fingerprint; // = "BA3FBAAB67211CC78222654CCC240866";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x3F,0xBA,0xAB,0x67,0x21,0x1C,0xC7,0x82,0x22,0x65,0x4C,0xCC,0x24,0x08,0x66};

  MessageServer_notice_notify_args(const MessageServer_notice_notify_args&);
  MessageServer_notice_notify_args& operator=(const MessageServer_notice_notify_args&);
  MessageServer_notice_notify_args() {
  }

  virtual ~MessageServer_notice_notify_args() throw();
  NoticeRequest request;

  _MessageServer_notice_notify_args__isset __isset;

  void __set_request(const NoticeRequest& val);

  bool operator == (const MessageServer_notice_notify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const MessageServer_notice_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_notice_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_notice_notify_args& obj);
};


class MessageServer_notice_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "BA3FBAAB67211CC78222654CCC240866";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x3F,0xBA,0xAB,0x67,0x21,0x1C,0xC7,0x82,0x22,0x65,0x4C,0xCC,0x24,0x08,0x66};


  virtual ~MessageServer_notice_notify_pargs() throw();
  const NoticeRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_notice_notify_pargs& obj);
};


class MessageServer_notice_notify_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageServer_notice_notify_result(const MessageServer_notice_notify_result&);
  MessageServer_notice_notify_result& operator=(const MessageServer_notice_notify_result&);
  MessageServer_notice_notify_result() {
  }

  virtual ~MessageServer_notice_notify_result() throw();

  bool operator == (const MessageServer_notice_notify_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageServer_notice_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_notice_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_notice_notify_result& obj);
};


class MessageServer_notice_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MessageServer_notice_notify_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_notice_notify_presult& obj);
};

typedef struct _MessageServer_new_friend_notify_args__isset {
  _MessageServer_new_friend_notify_args__isset() : request(false) {}
  bool request :1;
} _MessageServer_new_friend_notify_args__isset;

class MessageServer_new_friend_notify_args {
 public:

  static const char* ascii_fingerprint; // = "F545C0FACB8D616D4F0D153229B118DE";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x45,0xC0,0xFA,0xCB,0x8D,0x61,0x6D,0x4F,0x0D,0x15,0x32,0x29,0xB1,0x18,0xDE};

  MessageServer_new_friend_notify_args(const MessageServer_new_friend_notify_args&);
  MessageServer_new_friend_notify_args& operator=(const MessageServer_new_friend_notify_args&);
  MessageServer_new_friend_notify_args() {
  }

  virtual ~MessageServer_new_friend_notify_args() throw();
  NewFriendRequest request;

  _MessageServer_new_friend_notify_args__isset __isset;

  void __set_request(const NewFriendRequest& val);

  bool operator == (const MessageServer_new_friend_notify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const MessageServer_new_friend_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_new_friend_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_new_friend_notify_args& obj);
};


class MessageServer_new_friend_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "F545C0FACB8D616D4F0D153229B118DE";
  static const uint8_t binary_fingerprint[16]; // = {0xF5,0x45,0xC0,0xFA,0xCB,0x8D,0x61,0x6D,0x4F,0x0D,0x15,0x32,0x29,0xB1,0x18,0xDE};


  virtual ~MessageServer_new_friend_notify_pargs() throw();
  const NewFriendRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_new_friend_notify_pargs& obj);
};


class MessageServer_new_friend_notify_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageServer_new_friend_notify_result(const MessageServer_new_friend_notify_result&);
  MessageServer_new_friend_notify_result& operator=(const MessageServer_new_friend_notify_result&);
  MessageServer_new_friend_notify_result() {
  }

  virtual ~MessageServer_new_friend_notify_result() throw();

  bool operator == (const MessageServer_new_friend_notify_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageServer_new_friend_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_new_friend_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_new_friend_notify_result& obj);
};


class MessageServer_new_friend_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MessageServer_new_friend_notify_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_new_friend_notify_presult& obj);
};

typedef struct _MessageServer_update_config_args__isset {
  _MessageServer_update_config_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _MessageServer_update_config_args__isset;

class MessageServer_update_config_args {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  MessageServer_update_config_args(const MessageServer_update_config_args&);
  MessageServer_update_config_args& operator=(const MessageServer_update_config_args&);
  MessageServer_update_config_args() : key(0), value() {
  }

  virtual ~MessageServer_update_config_args() throw();
  int32_t key;
  std::string value;

  _MessageServer_update_config_args__isset __isset;

  void __set_key(const int32_t val);

  void __set_value(const std::string& val);

  bool operator == (const MessageServer_update_config_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MessageServer_update_config_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_update_config_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_update_config_args& obj);
};


class MessageServer_update_config_pargs {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};


  virtual ~MessageServer_update_config_pargs() throw();
  const int32_t* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_update_config_pargs& obj);
};


class MessageServer_update_config_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  MessageServer_update_config_result(const MessageServer_update_config_result&);
  MessageServer_update_config_result& operator=(const MessageServer_update_config_result&);
  MessageServer_update_config_result() {
  }

  virtual ~MessageServer_update_config_result() throw();

  bool operator == (const MessageServer_update_config_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MessageServer_update_config_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_update_config_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_update_config_result& obj);
};


class MessageServer_update_config_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~MessageServer_update_config_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_update_config_presult& obj);
};

typedef struct _MessageServer_get_num_args__isset {
  _MessageServer_get_num_args__isset() : uid(false), queue_type(false) {}
  bool uid :1;
  bool queue_type :1;
} _MessageServer_get_num_args__isset;

class MessageServer_get_num_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  MessageServer_get_num_args(const MessageServer_get_num_args&);
  MessageServer_get_num_args& operator=(const MessageServer_get_num_args&);
  MessageServer_get_num_args() : uid(0), queue_type(0) {
  }

  virtual ~MessageServer_get_num_args() throw();
  int32_t uid;
  int32_t queue_type;

  _MessageServer_get_num_args__isset __isset;

  void __set_uid(const int32_t val);

  void __set_queue_type(const int32_t val);

  bool operator == (const MessageServer_get_num_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(queue_type == rhs.queue_type))
      return false;
    return true;
  }
  bool operator != (const MessageServer_get_num_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_get_num_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_get_num_args& obj);
};


class MessageServer_get_num_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~MessageServer_get_num_pargs() throw();
  const int32_t* uid;
  const int32_t* queue_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_get_num_pargs& obj);
};

typedef struct _MessageServer_get_num_result__isset {
  _MessageServer_get_num_result__isset() : success(false) {}
  bool success :1;
} _MessageServer_get_num_result__isset;

class MessageServer_get_num_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  MessageServer_get_num_result(const MessageServer_get_num_result&);
  MessageServer_get_num_result& operator=(const MessageServer_get_num_result&);
  MessageServer_get_num_result() : success(0) {
  }

  virtual ~MessageServer_get_num_result() throw();
  int32_t success;

  _MessageServer_get_num_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const MessageServer_get_num_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MessageServer_get_num_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MessageServer_get_num_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_get_num_result& obj);
};

typedef struct _MessageServer_get_num_presult__isset {
  _MessageServer_get_num_presult__isset() : success(false) {}
  bool success :1;
} _MessageServer_get_num_presult__isset;

class MessageServer_get_num_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~MessageServer_get_num_presult() throw();
  int32_t* success;

  _MessageServer_get_num_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const MessageServer_get_num_presult& obj);
};

class MessageServerClient : virtual public MessageServerIf {
 public:
  MessageServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MessageServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void send_system_msg(const SystemMessage& sMsg);
  void send_send_system_msg(const SystemMessage& sMsg);
  void recv_send_system_msg();
  void set_read(const int32_t sMsgId);
  void send_set_read(const int32_t sMsgId);
  void recv_set_read();
  void set_delete(const int32_t sMsgId);
  void send_set_delete(const int32_t sMsgId);
  void recv_set_delete();
  void clear_red_by_uid(const int32_t uid, const int32_t mType, const int32_t num);
  void send_clear_red_by_uid(const int32_t uid, const int32_t mType, const int32_t num);
  void recv_clear_red_by_uid();
  void new_tweet_notify(const NewTweetNotifyRequest& request);
  void send_new_tweet_notify(const NewTweetNotifyRequest& request);
  void recv_new_tweet_notify();
  void notice_notify(const NoticeRequest& request);
  void send_notice_notify(const NoticeRequest& request);
  void recv_notice_notify();
  void new_friend_notify(const NewFriendRequest& request);
  void send_new_friend_notify(const NewFriendRequest& request);
  void recv_new_friend_notify();
  void update_config(const int32_t key, const std::string& value);
  void send_update_config(const int32_t key, const std::string& value);
  void recv_update_config();
  int32_t get_num(const int32_t uid, const int32_t queue_type);
  void send_get_num(const int32_t uid, const int32_t queue_type);
  int32_t recv_get_num();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MessageServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MessageServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MessageServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_send_system_msg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_red_by_uid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_new_tweet_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notice_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_new_friend_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_config(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_num(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MessageServerProcessor(boost::shared_ptr<MessageServerIf> iface) :
    iface_(iface) {
    processMap_["send_system_msg"] = &MessageServerProcessor::process_send_system_msg;
    processMap_["set_read"] = &MessageServerProcessor::process_set_read;
    processMap_["set_delete"] = &MessageServerProcessor::process_set_delete;
    processMap_["clear_red_by_uid"] = &MessageServerProcessor::process_clear_red_by_uid;
    processMap_["new_tweet_notify"] = &MessageServerProcessor::process_new_tweet_notify;
    processMap_["notice_notify"] = &MessageServerProcessor::process_notice_notify;
    processMap_["new_friend_notify"] = &MessageServerProcessor::process_new_friend_notify;
    processMap_["update_config"] = &MessageServerProcessor::process_update_config;
    processMap_["get_num"] = &MessageServerProcessor::process_get_num;
  }

  virtual ~MessageServerProcessor() {}
};

class MessageServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MessageServerProcessorFactory(const ::boost::shared_ptr< MessageServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MessageServerIfFactory > handlerFactory_;
};

class MessageServerMultiface : virtual public MessageServerIf {
 public:
  MessageServerMultiface(std::vector<boost::shared_ptr<MessageServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MessageServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MessageServerIf> > ifaces_;
  MessageServerMultiface() {}
  void add(boost::shared_ptr<MessageServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void send_system_msg(const SystemMessage& sMsg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_system_msg(sMsg);
    }
    ifaces_[i]->send_system_msg(sMsg);
  }

  void set_read(const int32_t sMsgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_read(sMsgId);
    }
    ifaces_[i]->set_read(sMsgId);
  }

  void set_delete(const int32_t sMsgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_delete(sMsgId);
    }
    ifaces_[i]->set_delete(sMsgId);
  }

  void clear_red_by_uid(const int32_t uid, const int32_t mType, const int32_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_red_by_uid(uid, mType, num);
    }
    ifaces_[i]->clear_red_by_uid(uid, mType, num);
  }

  void new_tweet_notify(const NewTweetNotifyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->new_tweet_notify(request);
    }
    ifaces_[i]->new_tweet_notify(request);
  }

  void notice_notify(const NoticeRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notice_notify(request);
    }
    ifaces_[i]->notice_notify(request);
  }

  void new_friend_notify(const NewFriendRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->new_friend_notify(request);
    }
    ifaces_[i]->new_friend_notify(request);
  }

  void update_config(const int32_t key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_config(key, value);
    }
    ifaces_[i]->update_config(key, value);
  }

  int32_t get_num(const int32_t uid, const int32_t queue_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_num(uid, queue_type);
    }
    return ifaces_[i]->get_num(uid, queue_type);
  }

};

} // namespace

#endif
