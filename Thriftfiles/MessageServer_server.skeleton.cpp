// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MessageServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::tis;

class MessageServerHandler : virtual public MessageServerIf {
 public:
  MessageServerHandler() {
    // Your initialization goes here
  }

  void send_system_msg(const SystemMessage& sMsg) {
    // Your implementation goes here
    printf("send_system_msg\n");
  }

  void set_read(const int32_t sMsgId) {
    // Your implementation goes here
    printf("set_read\n");
  }

  void set_delete(const int32_t sMsgId) {
    // Your implementation goes here
    printf("set_delete\n");
  }

  void clear_red_by_uid(const int32_t uid, const int32_t mType, const int32_t num) {
    // Your implementation goes here
    printf("clear_red_by_uid\n");
  }

  void new_tweet_notify(const NewTweetNotifyRequest& request) {
    // Your implementation goes here
    printf("new_tweet_notify\n");
  }

  void notice_notify(const NoticeRequest& request) {
    // Your implementation goes here
    printf("notice_notify\n");
  }

  void new_friend_notify(const NewFriendRequest& request) {
    // Your implementation goes here
    printf("new_friend_notify\n");
  }

  void update_config(const int32_t key, const std::string& value) {
    // Your implementation goes here
    printf("update_config\n");
  }

  int32_t get_num(const int32_t uid, const int32_t queue_type) {
    // Your implementation goes here
    printf("get_num\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MessageServerHandler> handler(new MessageServerHandler());
  shared_ptr<TProcessor> processor(new MessageServerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

