/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PushService_H
#define PushService_H

#include <thrift/TDispatchProcessor.h>
#include "push_server_types.h"

namespace tis {

class PushServiceIf {
 public:
  virtual ~PushServiceIf() {}
  virtual void ping(std::string& _return) = 0;
  virtual int32_t single_notify(const SingleNotifyRequest& request) = 0;
  virtual int32_t batch_notify(const BatchNotifyRequest& request) = 0;
  virtual int32_t broadcast(const BroadcastRequest& request) = 0;
  virtual int32_t optag(const TagRequest& request) = 0;
  virtual void condition_push(const ConditionPushRequest& request) = 0;
};

class PushServiceIfFactory {
 public:
  typedef PushServiceIf Handler;

  virtual ~PushServiceIfFactory() {}

  virtual PushServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PushServiceIf* /* handler */) = 0;
};

class PushServiceIfSingletonFactory : virtual public PushServiceIfFactory {
 public:
  PushServiceIfSingletonFactory(const boost::shared_ptr<PushServiceIf>& iface) : iface_(iface) {}
  virtual ~PushServiceIfSingletonFactory() {}

  virtual PushServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PushServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PushServiceIf> iface_;
};

class PushServiceNull : virtual public PushServiceIf {
 public:
  virtual ~PushServiceNull() {}
  void ping(std::string& /* _return */) {
    return;
  }
  int32_t single_notify(const SingleNotifyRequest& /* request */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t batch_notify(const BatchNotifyRequest& /* request */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t broadcast(const BroadcastRequest& /* request */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t optag(const TagRequest& /* request */) {
    int32_t _return = 0;
    return _return;
  }
  void condition_push(const ConditionPushRequest& /* request */) {
    return;
  }
};


class PushService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PushService_ping_args(const PushService_ping_args&);
  PushService_ping_args& operator=(const PushService_ping_args&);
  PushService_ping_args() {
  }

  virtual ~PushService_ping_args() throw();

  bool operator == (const PushService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PushService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_ping_args& obj);
};


class PushService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~PushService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_ping_pargs& obj);
};

typedef struct _PushService_ping_result__isset {
  _PushService_ping_result__isset() : success(false) {}
  bool success :1;
} _PushService_ping_result__isset;

class PushService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  PushService_ping_result(const PushService_ping_result&);
  PushService_ping_result& operator=(const PushService_ping_result&);
  PushService_ping_result() : success() {
  }

  virtual ~PushService_ping_result() throw();
  std::string success;

  _PushService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const PushService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PushService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_ping_result& obj);
};

typedef struct _PushService_ping_presult__isset {
  _PushService_ping_presult__isset() : success(false) {}
  bool success :1;
} _PushService_ping_presult__isset;

class PushService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~PushService_ping_presult() throw();
  std::string* success;

  _PushService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_ping_presult& obj);
};

typedef struct _PushService_single_notify_args__isset {
  _PushService_single_notify_args__isset() : request(false) {}
  bool request :1;
} _PushService_single_notify_args__isset;

class PushService_single_notify_args {
 public:

  static const char* ascii_fingerprint; // = "0C3DE55F7B7ED7E65D3C074CFBBFA459";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x3D,0xE5,0x5F,0x7B,0x7E,0xD7,0xE6,0x5D,0x3C,0x07,0x4C,0xFB,0xBF,0xA4,0x59};

  PushService_single_notify_args(const PushService_single_notify_args&);
  PushService_single_notify_args& operator=(const PushService_single_notify_args&);
  PushService_single_notify_args() {
  }

  virtual ~PushService_single_notify_args() throw();
  SingleNotifyRequest request;

  _PushService_single_notify_args__isset __isset;

  void __set_request(const SingleNotifyRequest& val);

  bool operator == (const PushService_single_notify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_single_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_single_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_single_notify_args& obj);
};


class PushService_single_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "0C3DE55F7B7ED7E65D3C074CFBBFA459";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x3D,0xE5,0x5F,0x7B,0x7E,0xD7,0xE6,0x5D,0x3C,0x07,0x4C,0xFB,0xBF,0xA4,0x59};


  virtual ~PushService_single_notify_pargs() throw();
  const SingleNotifyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_single_notify_pargs& obj);
};

typedef struct _PushService_single_notify_result__isset {
  _PushService_single_notify_result__isset() : success(false) {}
  bool success :1;
} _PushService_single_notify_result__isset;

class PushService_single_notify_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  PushService_single_notify_result(const PushService_single_notify_result&);
  PushService_single_notify_result& operator=(const PushService_single_notify_result&);
  PushService_single_notify_result() : success(0) {
  }

  virtual ~PushService_single_notify_result() throw();
  int32_t success;

  _PushService_single_notify_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PushService_single_notify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PushService_single_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_single_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_single_notify_result& obj);
};

typedef struct _PushService_single_notify_presult__isset {
  _PushService_single_notify_presult__isset() : success(false) {}
  bool success :1;
} _PushService_single_notify_presult__isset;

class PushService_single_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~PushService_single_notify_presult() throw();
  int32_t* success;

  _PushService_single_notify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_single_notify_presult& obj);
};

typedef struct _PushService_batch_notify_args__isset {
  _PushService_batch_notify_args__isset() : request(false) {}
  bool request :1;
} _PushService_batch_notify_args__isset;

class PushService_batch_notify_args {
 public:

  static const char* ascii_fingerprint; // = "C452D281D92E741B73A8FF9F78F5C6C3";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x52,0xD2,0x81,0xD9,0x2E,0x74,0x1B,0x73,0xA8,0xFF,0x9F,0x78,0xF5,0xC6,0xC3};

  PushService_batch_notify_args(const PushService_batch_notify_args&);
  PushService_batch_notify_args& operator=(const PushService_batch_notify_args&);
  PushService_batch_notify_args() {
  }

  virtual ~PushService_batch_notify_args() throw();
  BatchNotifyRequest request;

  _PushService_batch_notify_args__isset __isset;

  void __set_request(const BatchNotifyRequest& val);

  bool operator == (const PushService_batch_notify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_batch_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_batch_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_notify_args& obj);
};


class PushService_batch_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "C452D281D92E741B73A8FF9F78F5C6C3";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0x52,0xD2,0x81,0xD9,0x2E,0x74,0x1B,0x73,0xA8,0xFF,0x9F,0x78,0xF5,0xC6,0xC3};


  virtual ~PushService_batch_notify_pargs() throw();
  const BatchNotifyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_notify_pargs& obj);
};

typedef struct _PushService_batch_notify_result__isset {
  _PushService_batch_notify_result__isset() : success(false) {}
  bool success :1;
} _PushService_batch_notify_result__isset;

class PushService_batch_notify_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  PushService_batch_notify_result(const PushService_batch_notify_result&);
  PushService_batch_notify_result& operator=(const PushService_batch_notify_result&);
  PushService_batch_notify_result() : success(0) {
  }

  virtual ~PushService_batch_notify_result() throw();
  int32_t success;

  _PushService_batch_notify_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PushService_batch_notify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PushService_batch_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_batch_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_notify_result& obj);
};

typedef struct _PushService_batch_notify_presult__isset {
  _PushService_batch_notify_presult__isset() : success(false) {}
  bool success :1;
} _PushService_batch_notify_presult__isset;

class PushService_batch_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~PushService_batch_notify_presult() throw();
  int32_t* success;

  _PushService_batch_notify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_notify_presult& obj);
};

typedef struct _PushService_broadcast_args__isset {
  _PushService_broadcast_args__isset() : request(false) {}
  bool request :1;
} _PushService_broadcast_args__isset;

class PushService_broadcast_args {
 public:

  static const char* ascii_fingerprint; // = "09977A7320F7AC1FE813D719D4F251C3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x97,0x7A,0x73,0x20,0xF7,0xAC,0x1F,0xE8,0x13,0xD7,0x19,0xD4,0xF2,0x51,0xC3};

  PushService_broadcast_args(const PushService_broadcast_args&);
  PushService_broadcast_args& operator=(const PushService_broadcast_args&);
  PushService_broadcast_args() {
  }

  virtual ~PushService_broadcast_args() throw();
  BroadcastRequest request;

  _PushService_broadcast_args__isset __isset;

  void __set_request(const BroadcastRequest& val);

  bool operator == (const PushService_broadcast_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_broadcast_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_broadcast_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_broadcast_args& obj);
};


class PushService_broadcast_pargs {
 public:

  static const char* ascii_fingerprint; // = "09977A7320F7AC1FE813D719D4F251C3";
  static const uint8_t binary_fingerprint[16]; // = {0x09,0x97,0x7A,0x73,0x20,0xF7,0xAC,0x1F,0xE8,0x13,0xD7,0x19,0xD4,0xF2,0x51,0xC3};


  virtual ~PushService_broadcast_pargs() throw();
  const BroadcastRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_broadcast_pargs& obj);
};

typedef struct _PushService_broadcast_result__isset {
  _PushService_broadcast_result__isset() : success(false) {}
  bool success :1;
} _PushService_broadcast_result__isset;

class PushService_broadcast_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  PushService_broadcast_result(const PushService_broadcast_result&);
  PushService_broadcast_result& operator=(const PushService_broadcast_result&);
  PushService_broadcast_result() : success(0) {
  }

  virtual ~PushService_broadcast_result() throw();
  int32_t success;

  _PushService_broadcast_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PushService_broadcast_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PushService_broadcast_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_broadcast_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_broadcast_result& obj);
};

typedef struct _PushService_broadcast_presult__isset {
  _PushService_broadcast_presult__isset() : success(false) {}
  bool success :1;
} _PushService_broadcast_presult__isset;

class PushService_broadcast_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~PushService_broadcast_presult() throw();
  int32_t* success;

  _PushService_broadcast_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_broadcast_presult& obj);
};

typedef struct _PushService_optag_args__isset {
  _PushService_optag_args__isset() : request(false) {}
  bool request :1;
} _PushService_optag_args__isset;

class PushService_optag_args {
 public:

  static const char* ascii_fingerprint; // = "F20FF0105FD02361523CAF78EC542F60";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x0F,0xF0,0x10,0x5F,0xD0,0x23,0x61,0x52,0x3C,0xAF,0x78,0xEC,0x54,0x2F,0x60};

  PushService_optag_args(const PushService_optag_args&);
  PushService_optag_args& operator=(const PushService_optag_args&);
  PushService_optag_args() {
  }

  virtual ~PushService_optag_args() throw();
  TagRequest request;

  _PushService_optag_args__isset __isset;

  void __set_request(const TagRequest& val);

  bool operator == (const PushService_optag_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_optag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_optag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_optag_args& obj);
};


class PushService_optag_pargs {
 public:

  static const char* ascii_fingerprint; // = "F20FF0105FD02361523CAF78EC542F60";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x0F,0xF0,0x10,0x5F,0xD0,0x23,0x61,0x52,0x3C,0xAF,0x78,0xEC,0x54,0x2F,0x60};


  virtual ~PushService_optag_pargs() throw();
  const TagRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_optag_pargs& obj);
};

typedef struct _PushService_optag_result__isset {
  _PushService_optag_result__isset() : success(false) {}
  bool success :1;
} _PushService_optag_result__isset;

class PushService_optag_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  PushService_optag_result(const PushService_optag_result&);
  PushService_optag_result& operator=(const PushService_optag_result&);
  PushService_optag_result() : success(0) {
  }

  virtual ~PushService_optag_result() throw();
  int32_t success;

  _PushService_optag_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PushService_optag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PushService_optag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_optag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_optag_result& obj);
};

typedef struct _PushService_optag_presult__isset {
  _PushService_optag_presult__isset() : success(false) {}
  bool success :1;
} _PushService_optag_presult__isset;

class PushService_optag_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~PushService_optag_presult() throw();
  int32_t* success;

  _PushService_optag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_optag_presult& obj);
};

typedef struct _PushService_condition_push_args__isset {
  _PushService_condition_push_args__isset() : request(false) {}
  bool request :1;
} _PushService_condition_push_args__isset;

class PushService_condition_push_args {
 public:

  static const char* ascii_fingerprint; // = "2D66E99EFE754B416FC4838DBB6A6F1F";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0x66,0xE9,0x9E,0xFE,0x75,0x4B,0x41,0x6F,0xC4,0x83,0x8D,0xBB,0x6A,0x6F,0x1F};

  PushService_condition_push_args(const PushService_condition_push_args&);
  PushService_condition_push_args& operator=(const PushService_condition_push_args&);
  PushService_condition_push_args() {
  }

  virtual ~PushService_condition_push_args() throw();
  ConditionPushRequest request;

  _PushService_condition_push_args__isset __isset;

  void __set_request(const ConditionPushRequest& val);

  bool operator == (const PushService_condition_push_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_condition_push_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_condition_push_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_condition_push_args& obj);
};


class PushService_condition_push_pargs {
 public:

  static const char* ascii_fingerprint; // = "2D66E99EFE754B416FC4838DBB6A6F1F";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0x66,0xE9,0x9E,0xFE,0x75,0x4B,0x41,0x6F,0xC4,0x83,0x8D,0xBB,0x6A,0x6F,0x1F};


  virtual ~PushService_condition_push_pargs() throw();
  const ConditionPushRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_condition_push_pargs& obj);
};


class PushService_condition_push_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PushService_condition_push_result(const PushService_condition_push_result&);
  PushService_condition_push_result& operator=(const PushService_condition_push_result&);
  PushService_condition_push_result() {
  }

  virtual ~PushService_condition_push_result() throw();

  bool operator == (const PushService_condition_push_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PushService_condition_push_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_condition_push_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_condition_push_result& obj);
};


class PushService_condition_push_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~PushService_condition_push_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_condition_push_presult& obj);
};

class PushServiceClient : virtual public PushServiceIf {
 public:
  PushServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PushServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return);
  void send_ping();
  void recv_ping(std::string& _return);
  int32_t single_notify(const SingleNotifyRequest& request);
  void send_single_notify(const SingleNotifyRequest& request);
  int32_t recv_single_notify();
  int32_t batch_notify(const BatchNotifyRequest& request);
  void send_batch_notify(const BatchNotifyRequest& request);
  int32_t recv_batch_notify();
  int32_t broadcast(const BroadcastRequest& request);
  void send_broadcast(const BroadcastRequest& request);
  int32_t recv_broadcast();
  int32_t optag(const TagRequest& request);
  void send_optag(const TagRequest& request);
  int32_t recv_optag();
  void condition_push(const ConditionPushRequest& request);
  void send_condition_push(const ConditionPushRequest& request);
  void recv_condition_push();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PushServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PushServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PushServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_single_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batch_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_broadcast(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_optag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_condition_push(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PushServiceProcessor(boost::shared_ptr<PushServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &PushServiceProcessor::process_ping;
    processMap_["single_notify"] = &PushServiceProcessor::process_single_notify;
    processMap_["batch_notify"] = &PushServiceProcessor::process_batch_notify;
    processMap_["broadcast"] = &PushServiceProcessor::process_broadcast;
    processMap_["optag"] = &PushServiceProcessor::process_optag;
    processMap_["condition_push"] = &PushServiceProcessor::process_condition_push;
  }

  virtual ~PushServiceProcessor() {}
};

class PushServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PushServiceProcessorFactory(const ::boost::shared_ptr< PushServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PushServiceIfFactory > handlerFactory_;
};

class PushServiceMultiface : virtual public PushServiceIf {
 public:
  PushServiceMultiface(std::vector<boost::shared_ptr<PushServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PushServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PushServiceIf> > ifaces_;
  PushServiceMultiface() {}
  void add(boost::shared_ptr<PushServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  int32_t single_notify(const SingleNotifyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->single_notify(request);
    }
    return ifaces_[i]->single_notify(request);
  }

  int32_t batch_notify(const BatchNotifyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batch_notify(request);
    }
    return ifaces_[i]->batch_notify(request);
  }

  int32_t broadcast(const BroadcastRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->broadcast(request);
    }
    return ifaces_[i]->broadcast(request);
  }

  int32_t optag(const TagRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->optag(request);
    }
    return ifaces_[i]->optag(request);
  }

  void condition_push(const ConditionPushRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->condition_push(request);
    }
    ifaces_[i]->condition_push(request);
  }

};

} // namespace

#endif
