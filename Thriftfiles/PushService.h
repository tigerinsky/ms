/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PushService_H
#define PushService_H

#include <thrift/TDispatchProcessor.h>
#include "push_server_types.h"

namespace tis {

class PushServiceIf {
 public:
  virtual ~PushServiceIf() {}
  virtual void ping() = 0;
  virtual void single_notify(const SingleNotifyRequest& request) = 0;
  virtual void batch_notify(const BatchNotifyRequest& request) = 0;
  virtual void admin_notify(const AdminNotifyRequest& request) = 0;
  virtual void batch_info(const BatchInfoRequest& request) = 0;
  virtual void broadcast(std::string& _return, const BroadcastRequest& request) = 0;
  virtual void zip() = 0;
};

class PushServiceIfFactory {
 public:
  typedef PushServiceIf Handler;

  virtual ~PushServiceIfFactory() {}

  virtual PushServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PushServiceIf* /* handler */) = 0;
};

class PushServiceIfSingletonFactory : virtual public PushServiceIfFactory {
 public:
  PushServiceIfSingletonFactory(const boost::shared_ptr<PushServiceIf>& iface) : iface_(iface) {}
  virtual ~PushServiceIfSingletonFactory() {}

  virtual PushServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PushServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PushServiceIf> iface_;
};

class PushServiceNull : virtual public PushServiceIf {
 public:
  virtual ~PushServiceNull() {}
  void ping() {
    return;
  }
  void single_notify(const SingleNotifyRequest& /* request */) {
    return;
  }
  void batch_notify(const BatchNotifyRequest& /* request */) {
    return;
  }
  void admin_notify(const AdminNotifyRequest& /* request */) {
    return;
  }
  void batch_info(const BatchInfoRequest& /* request */) {
    return;
  }
  void broadcast(std::string& /* _return */, const BroadcastRequest& /* request */) {
    return;
  }
  void zip() {
    return;
  }
};


class PushService_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PushService_ping_args(const PushService_ping_args&);
  PushService_ping_args& operator=(const PushService_ping_args&);
  PushService_ping_args() {
  }

  virtual ~PushService_ping_args() throw();

  bool operator == (const PushService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PushService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_ping_args& obj);
};


class PushService_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~PushService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_ping_pargs& obj);
};


class PushService_ping_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PushService_ping_result(const PushService_ping_result&);
  PushService_ping_result& operator=(const PushService_ping_result&);
  PushService_ping_result() {
  }

  virtual ~PushService_ping_result() throw();

  bool operator == (const PushService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PushService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_ping_result& obj);
};


class PushService_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~PushService_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_ping_presult& obj);
};

typedef struct _PushService_single_notify_args__isset {
  _PushService_single_notify_args__isset() : request(false) {}
  bool request :1;
} _PushService_single_notify_args__isset;

class PushService_single_notify_args {
 public:

  static const char* ascii_fingerprint; // = "CBCB68F9D02988FF1C20AC19B3C5FCC4";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0xCB,0x68,0xF9,0xD0,0x29,0x88,0xFF,0x1C,0x20,0xAC,0x19,0xB3,0xC5,0xFC,0xC4};

  PushService_single_notify_args(const PushService_single_notify_args&);
  PushService_single_notify_args& operator=(const PushService_single_notify_args&);
  PushService_single_notify_args() {
  }

  virtual ~PushService_single_notify_args() throw();
  SingleNotifyRequest request;

  _PushService_single_notify_args__isset __isset;

  void __set_request(const SingleNotifyRequest& val);

  bool operator == (const PushService_single_notify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_single_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_single_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_single_notify_args& obj);
};


class PushService_single_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "CBCB68F9D02988FF1C20AC19B3C5FCC4";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0xCB,0x68,0xF9,0xD0,0x29,0x88,0xFF,0x1C,0x20,0xAC,0x19,0xB3,0xC5,0xFC,0xC4};


  virtual ~PushService_single_notify_pargs() throw();
  const SingleNotifyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_single_notify_pargs& obj);
};

typedef struct _PushService_single_notify_result__isset {
  _PushService_single_notify_result__isset() : e(false) {}
  bool e :1;
} _PushService_single_notify_result__isset;

class PushService_single_notify_result {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};

  PushService_single_notify_result(const PushService_single_notify_result&);
  PushService_single_notify_result& operator=(const PushService_single_notify_result&);
  PushService_single_notify_result() {
  }

  virtual ~PushService_single_notify_result() throw();
  InvalidParamException e;

  _PushService_single_notify_result__isset __isset;

  void __set_e(const InvalidParamException& val);

  bool operator == (const PushService_single_notify_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const PushService_single_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_single_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_single_notify_result& obj);
};

typedef struct _PushService_single_notify_presult__isset {
  _PushService_single_notify_presult__isset() : e(false) {}
  bool e :1;
} _PushService_single_notify_presult__isset;

class PushService_single_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};


  virtual ~PushService_single_notify_presult() throw();
  InvalidParamException e;

  _PushService_single_notify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_single_notify_presult& obj);
};

typedef struct _PushService_batch_notify_args__isset {
  _PushService_batch_notify_args__isset() : request(false) {}
  bool request :1;
} _PushService_batch_notify_args__isset;

class PushService_batch_notify_args {
 public:

  static const char* ascii_fingerprint; // = "C9E9ACC9236CB120E8751BA5317CC8C2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0xE9,0xAC,0xC9,0x23,0x6C,0xB1,0x20,0xE8,0x75,0x1B,0xA5,0x31,0x7C,0xC8,0xC2};

  PushService_batch_notify_args(const PushService_batch_notify_args&);
  PushService_batch_notify_args& operator=(const PushService_batch_notify_args&);
  PushService_batch_notify_args() {
  }

  virtual ~PushService_batch_notify_args() throw();
  BatchNotifyRequest request;

  _PushService_batch_notify_args__isset __isset;

  void __set_request(const BatchNotifyRequest& val);

  bool operator == (const PushService_batch_notify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_batch_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_batch_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_notify_args& obj);
};


class PushService_batch_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "C9E9ACC9236CB120E8751BA5317CC8C2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0xE9,0xAC,0xC9,0x23,0x6C,0xB1,0x20,0xE8,0x75,0x1B,0xA5,0x31,0x7C,0xC8,0xC2};


  virtual ~PushService_batch_notify_pargs() throw();
  const BatchNotifyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_notify_pargs& obj);
};

typedef struct _PushService_batch_notify_result__isset {
  _PushService_batch_notify_result__isset() : e(false) {}
  bool e :1;
} _PushService_batch_notify_result__isset;

class PushService_batch_notify_result {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};

  PushService_batch_notify_result(const PushService_batch_notify_result&);
  PushService_batch_notify_result& operator=(const PushService_batch_notify_result&);
  PushService_batch_notify_result() {
  }

  virtual ~PushService_batch_notify_result() throw();
  InvalidParamException e;

  _PushService_batch_notify_result__isset __isset;

  void __set_e(const InvalidParamException& val);

  bool operator == (const PushService_batch_notify_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const PushService_batch_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_batch_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_notify_result& obj);
};

typedef struct _PushService_batch_notify_presult__isset {
  _PushService_batch_notify_presult__isset() : e(false) {}
  bool e :1;
} _PushService_batch_notify_presult__isset;

class PushService_batch_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};


  virtual ~PushService_batch_notify_presult() throw();
  InvalidParamException e;

  _PushService_batch_notify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_notify_presult& obj);
};

typedef struct _PushService_admin_notify_args__isset {
  _PushService_admin_notify_args__isset() : request(false) {}
  bool request :1;
} _PushService_admin_notify_args__isset;

class PushService_admin_notify_args {
 public:

  static const char* ascii_fingerprint; // = "03DABDEC82070160674FD5B9656AF3B9";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xDA,0xBD,0xEC,0x82,0x07,0x01,0x60,0x67,0x4F,0xD5,0xB9,0x65,0x6A,0xF3,0xB9};

  PushService_admin_notify_args(const PushService_admin_notify_args&);
  PushService_admin_notify_args& operator=(const PushService_admin_notify_args&);
  PushService_admin_notify_args() {
  }

  virtual ~PushService_admin_notify_args() throw();
  AdminNotifyRequest request;

  _PushService_admin_notify_args__isset __isset;

  void __set_request(const AdminNotifyRequest& val);

  bool operator == (const PushService_admin_notify_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_admin_notify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_admin_notify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_admin_notify_args& obj);
};


class PushService_admin_notify_pargs {
 public:

  static const char* ascii_fingerprint; // = "03DABDEC82070160674FD5B9656AF3B9";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0xDA,0xBD,0xEC,0x82,0x07,0x01,0x60,0x67,0x4F,0xD5,0xB9,0x65,0x6A,0xF3,0xB9};


  virtual ~PushService_admin_notify_pargs() throw();
  const AdminNotifyRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_admin_notify_pargs& obj);
};

typedef struct _PushService_admin_notify_result__isset {
  _PushService_admin_notify_result__isset() : e(false) {}
  bool e :1;
} _PushService_admin_notify_result__isset;

class PushService_admin_notify_result {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};

  PushService_admin_notify_result(const PushService_admin_notify_result&);
  PushService_admin_notify_result& operator=(const PushService_admin_notify_result&);
  PushService_admin_notify_result() {
  }

  virtual ~PushService_admin_notify_result() throw();
  InvalidParamException e;

  _PushService_admin_notify_result__isset __isset;

  void __set_e(const InvalidParamException& val);

  bool operator == (const PushService_admin_notify_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const PushService_admin_notify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_admin_notify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_admin_notify_result& obj);
};

typedef struct _PushService_admin_notify_presult__isset {
  _PushService_admin_notify_presult__isset() : e(false) {}
  bool e :1;
} _PushService_admin_notify_presult__isset;

class PushService_admin_notify_presult {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};


  virtual ~PushService_admin_notify_presult() throw();
  InvalidParamException e;

  _PushService_admin_notify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_admin_notify_presult& obj);
};

typedef struct _PushService_batch_info_args__isset {
  _PushService_batch_info_args__isset() : request(false) {}
  bool request :1;
} _PushService_batch_info_args__isset;

class PushService_batch_info_args {
 public:

  static const char* ascii_fingerprint; // = "6E535CFE4CB31AD4E2FB9199CEB16F49";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x53,0x5C,0xFE,0x4C,0xB3,0x1A,0xD4,0xE2,0xFB,0x91,0x99,0xCE,0xB1,0x6F,0x49};

  PushService_batch_info_args(const PushService_batch_info_args&);
  PushService_batch_info_args& operator=(const PushService_batch_info_args&);
  PushService_batch_info_args() {
  }

  virtual ~PushService_batch_info_args() throw();
  BatchInfoRequest request;

  _PushService_batch_info_args__isset __isset;

  void __set_request(const BatchInfoRequest& val);

  bool operator == (const PushService_batch_info_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_batch_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_batch_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_info_args& obj);
};


class PushService_batch_info_pargs {
 public:

  static const char* ascii_fingerprint; // = "6E535CFE4CB31AD4E2FB9199CEB16F49";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x53,0x5C,0xFE,0x4C,0xB3,0x1A,0xD4,0xE2,0xFB,0x91,0x99,0xCE,0xB1,0x6F,0x49};


  virtual ~PushService_batch_info_pargs() throw();
  const BatchInfoRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_info_pargs& obj);
};

typedef struct _PushService_batch_info_result__isset {
  _PushService_batch_info_result__isset() : e(false) {}
  bool e :1;
} _PushService_batch_info_result__isset;

class PushService_batch_info_result {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};

  PushService_batch_info_result(const PushService_batch_info_result&);
  PushService_batch_info_result& operator=(const PushService_batch_info_result&);
  PushService_batch_info_result() {
  }

  virtual ~PushService_batch_info_result() throw();
  InvalidParamException e;

  _PushService_batch_info_result__isset __isset;

  void __set_e(const InvalidParamException& val);

  bool operator == (const PushService_batch_info_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const PushService_batch_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_batch_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_info_result& obj);
};

typedef struct _PushService_batch_info_presult__isset {
  _PushService_batch_info_presult__isset() : e(false) {}
  bool e :1;
} _PushService_batch_info_presult__isset;

class PushService_batch_info_presult {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};


  virtual ~PushService_batch_info_presult() throw();
  InvalidParamException e;

  _PushService_batch_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_batch_info_presult& obj);
};

typedef struct _PushService_broadcast_args__isset {
  _PushService_broadcast_args__isset() : request(false) {}
  bool request :1;
} _PushService_broadcast_args__isset;

class PushService_broadcast_args {
 public:

  static const char* ascii_fingerprint; // = "BE2F3293889B89996E50F117DA724C80";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x2F,0x32,0x93,0x88,0x9B,0x89,0x99,0x6E,0x50,0xF1,0x17,0xDA,0x72,0x4C,0x80};

  PushService_broadcast_args(const PushService_broadcast_args&);
  PushService_broadcast_args& operator=(const PushService_broadcast_args&);
  PushService_broadcast_args() {
  }

  virtual ~PushService_broadcast_args() throw();
  BroadcastRequest request;

  _PushService_broadcast_args__isset __isset;

  void __set_request(const BroadcastRequest& val);

  bool operator == (const PushService_broadcast_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const PushService_broadcast_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_broadcast_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_broadcast_args& obj);
};


class PushService_broadcast_pargs {
 public:

  static const char* ascii_fingerprint; // = "BE2F3293889B89996E50F117DA724C80";
  static const uint8_t binary_fingerprint[16]; // = {0xBE,0x2F,0x32,0x93,0x88,0x9B,0x89,0x99,0x6E,0x50,0xF1,0x17,0xDA,0x72,0x4C,0x80};


  virtual ~PushService_broadcast_pargs() throw();
  const BroadcastRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_broadcast_pargs& obj);
};

typedef struct _PushService_broadcast_result__isset {
  _PushService_broadcast_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _PushService_broadcast_result__isset;

class PushService_broadcast_result {
 public:

  static const char* ascii_fingerprint; // = "A07D9D59939C946EC162C58D3388883E";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x7D,0x9D,0x59,0x93,0x9C,0x94,0x6E,0xC1,0x62,0xC5,0x8D,0x33,0x88,0x88,0x3E};

  PushService_broadcast_result(const PushService_broadcast_result&);
  PushService_broadcast_result& operator=(const PushService_broadcast_result&);
  PushService_broadcast_result() : success() {
  }

  virtual ~PushService_broadcast_result() throw();
  std::string success;
  InvalidParamException e;

  _PushService_broadcast_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidParamException& val);

  bool operator == (const PushService_broadcast_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const PushService_broadcast_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_broadcast_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_broadcast_result& obj);
};

typedef struct _PushService_broadcast_presult__isset {
  _PushService_broadcast_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _PushService_broadcast_presult__isset;

class PushService_broadcast_presult {
 public:

  static const char* ascii_fingerprint; // = "A07D9D59939C946EC162C58D3388883E";
  static const uint8_t binary_fingerprint[16]; // = {0xA0,0x7D,0x9D,0x59,0x93,0x9C,0x94,0x6E,0xC1,0x62,0xC5,0x8D,0x33,0x88,0x88,0x3E};


  virtual ~PushService_broadcast_presult() throw();
  std::string* success;
  InvalidParamException e;

  _PushService_broadcast_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PushService_broadcast_presult& obj);
};


class PushService_zip_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PushService_zip_args(const PushService_zip_args&);
  PushService_zip_args& operator=(const PushService_zip_args&);
  PushService_zip_args() {
  }

  virtual ~PushService_zip_args() throw();

  bool operator == (const PushService_zip_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PushService_zip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PushService_zip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_zip_args& obj);
};


class PushService_zip_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~PushService_zip_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PushService_zip_pargs& obj);
};

class PushServiceClient : virtual public PushServiceIf {
 public:
  PushServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PushServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void single_notify(const SingleNotifyRequest& request);
  void send_single_notify(const SingleNotifyRequest& request);
  void recv_single_notify();
  void batch_notify(const BatchNotifyRequest& request);
  void send_batch_notify(const BatchNotifyRequest& request);
  void recv_batch_notify();
  void admin_notify(const AdminNotifyRequest& request);
  void send_admin_notify(const AdminNotifyRequest& request);
  void recv_admin_notify();
  void batch_info(const BatchInfoRequest& request);
  void send_batch_info(const BatchInfoRequest& request);
  void recv_batch_info();
  void broadcast(std::string& _return, const BroadcastRequest& request);
  void send_broadcast(const BroadcastRequest& request);
  void recv_broadcast(std::string& _return);
  void zip();
  void send_zip();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PushServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PushServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PushServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_single_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batch_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_admin_notify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batch_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_broadcast(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_zip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PushServiceProcessor(boost::shared_ptr<PushServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &PushServiceProcessor::process_ping;
    processMap_["single_notify"] = &PushServiceProcessor::process_single_notify;
    processMap_["batch_notify"] = &PushServiceProcessor::process_batch_notify;
    processMap_["admin_notify"] = &PushServiceProcessor::process_admin_notify;
    processMap_["batch_info"] = &PushServiceProcessor::process_batch_info;
    processMap_["broadcast"] = &PushServiceProcessor::process_broadcast;
    processMap_["zip"] = &PushServiceProcessor::process_zip;
  }

  virtual ~PushServiceProcessor() {}
};

class PushServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PushServiceProcessorFactory(const ::boost::shared_ptr< PushServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PushServiceIfFactory > handlerFactory_;
};

class PushServiceMultiface : virtual public PushServiceIf {
 public:
  PushServiceMultiface(std::vector<boost::shared_ptr<PushServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PushServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PushServiceIf> > ifaces_;
  PushServiceMultiface() {}
  void add(boost::shared_ptr<PushServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void single_notify(const SingleNotifyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->single_notify(request);
    }
    ifaces_[i]->single_notify(request);
  }

  void batch_notify(const BatchNotifyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batch_notify(request);
    }
    ifaces_[i]->batch_notify(request);
  }

  void admin_notify(const AdminNotifyRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->admin_notify(request);
    }
    ifaces_[i]->admin_notify(request);
  }

  void batch_info(const BatchInfoRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batch_info(request);
    }
    ifaces_[i]->batch_info(request);
  }

  void broadcast(std::string& _return, const BroadcastRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->broadcast(_return, request);
    }
    ifaces_[i]->broadcast(_return, request);
    return;
  }

  void zip() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->zip();
    }
    ifaces_[i]->zip();
  }

};

} // namespace

#endif
