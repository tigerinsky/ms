/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "push_server_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tis {

int _kLandingTypeValues[] = {
  LandingType::INDEX,
  LandingType::WAP,
  LandingType::COMMUNITY_DETAIL,
  LandingType::FRIEND,
  LandingType::PRIVATE_MSG,
  LandingType::SYSTEM_MSG,
  LandingType::USER
};
const char* _kLandingTypeNames[] = {
  "INDEX",
  "WAP",
  "COMMUNITY_DETAIL",
  "FRIEND",
  "PRIVATE_MSG",
  "SYSTEM_MSG",
  "USER"
};
const std::map<int, const char*> _LandingType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kLandingTypeValues, _kLandingTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMessageTypeValues[] = {
  MessageType::NOTIFY,
  MessageType::NOTIFYRED,
  MessageType::EMAILRED
};
const char* _kMessageTypeNames[] = {
  "NOTIFY",
  "NOTIFYRED",
  "EMAILRED"
};
const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDeviceTypeValues[] = {
  DeviceType::ANDROID,
  DeviceType::IOS
};
const char* _kDeviceTypeNames[] = {
  "ANDROID",
  "IOS"
};
const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kDeviceTypeValues, _kDeviceTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


Notify::~Notify() throw() {
}


void Notify::__set_mtype(const int32_t val) {
  this->mtype = val;
}

void Notify::__set_ltype(const int32_t val) {
  this->ltype = val;
}

void Notify::__set_content(const std::string& val) {
  this->content = val;
}

void Notify::__set_title(const std::string& val) {
  this->title = val;
}

void Notify::__set_url(const std::string& val) {
  this->url = val;
}

void Notify::__set_tid(const int32_t val) {
  this->tid = val;
}

void Notify::__set_uid(const int32_t val) {
  this->uid = val;
}

void Notify::__set_num(const int32_t val) {
  this->num = val;
}

const char* Notify::ascii_fingerprint = "0B16BE0E889E92C128BB4AF0864A1587";
const uint8_t Notify::binary_fingerprint[16] = {0x0B,0x16,0xBE,0x0E,0x88,0x9E,0x92,0xC1,0x28,0xBB,0x4A,0xF0,0x86,0x4A,0x15,0x87};

uint32_t Notify::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_mtype = false;
  bool isset_ltype = false;
  bool isset_content = false;
  bool isset_title = false;
  bool isset_url = false;
  bool isset_tid = false;
  bool isset_uid = false;
  bool isset_num = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mtype);
          isset_mtype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ltype);
          isset_ltype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          isset_content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tid);
          isset_tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num);
          isset_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_mtype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ltype)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_content)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_num)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Notify::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Notify");

  xfer += oprot->writeFieldBegin("mtype", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->mtype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ltype", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->ltype);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->tid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Notify &a, Notify &b) {
  using ::std::swap;
  swap(a.mtype, b.mtype);
  swap(a.ltype, b.ltype);
  swap(a.content, b.content);
  swap(a.title, b.title);
  swap(a.url, b.url);
  swap(a.tid, b.tid);
  swap(a.uid, b.uid);
  swap(a.num, b.num);
}

Notify::Notify(const Notify& other0) {
  mtype = other0.mtype;
  ltype = other0.ltype;
  content = other0.content;
  title = other0.title;
  url = other0.url;
  tid = other0.tid;
  uid = other0.uid;
  num = other0.num;
}
Notify& Notify::operator=(const Notify& other1) {
  mtype = other1.mtype;
  ltype = other1.ltype;
  content = other1.content;
  title = other1.title;
  url = other1.url;
  tid = other1.tid;
  uid = other1.uid;
  num = other1.num;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Notify& obj) {
  using apache::thrift::to_string;
  out << "Notify(";
  out << "mtype=" << to_string(obj.mtype);
  out << ", " << "ltype=" << to_string(obj.ltype);
  out << ", " << "content=" << to_string(obj.content);
  out << ", " << "title=" << to_string(obj.title);
  out << ", " << "url=" << to_string(obj.url);
  out << ", " << "tid=" << to_string(obj.tid);
  out << ", " << "uid=" << to_string(obj.uid);
  out << ", " << "num=" << to_string(obj.num);
  out << ")";
  return out;
}


SingleNotifyRequest::~SingleNotifyRequest() throw() {
}


void SingleNotifyRequest::__set_notify(const Notify& val) {
  this->notify = val;
}

void SingleNotifyRequest::__set_device_type(const int32_t val) {
  this->device_type = val;
}

void SingleNotifyRequest::__set_device_id(const std::string& val) {
  this->device_id = val;
}

const char* SingleNotifyRequest::ascii_fingerprint = "ABF94A58609F5D74998803834EF43F11";
const uint8_t SingleNotifyRequest::binary_fingerprint[16] = {0xAB,0xF9,0x4A,0x58,0x60,0x9F,0x5D,0x74,0x99,0x88,0x03,0x83,0x4E,0xF4,0x3F,0x11};

uint32_t SingleNotifyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_notify = false;
  bool isset_device_type = false;
  bool isset_device_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notify.read(iprot);
          isset_notify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->device_type);
          isset_device_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->device_id);
          isset_device_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_notify)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_device_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_device_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SingleNotifyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SingleNotifyRequest");

  xfer += oprot->writeFieldBegin("notify", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->notify.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->device_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->device_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SingleNotifyRequest &a, SingleNotifyRequest &b) {
  using ::std::swap;
  swap(a.notify, b.notify);
  swap(a.device_type, b.device_type);
  swap(a.device_id, b.device_id);
}

SingleNotifyRequest::SingleNotifyRequest(const SingleNotifyRequest& other2) {
  notify = other2.notify;
  device_type = other2.device_type;
  device_id = other2.device_id;
}
SingleNotifyRequest& SingleNotifyRequest::operator=(const SingleNotifyRequest& other3) {
  notify = other3.notify;
  device_type = other3.device_type;
  device_id = other3.device_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SingleNotifyRequest& obj) {
  using apache::thrift::to_string;
  out << "SingleNotifyRequest(";
  out << "notify=" << to_string(obj.notify);
  out << ", " << "device_type=" << to_string(obj.device_type);
  out << ", " << "device_id=" << to_string(obj.device_id);
  out << ")";
  return out;
}


BatchNotifyRequest::~BatchNotifyRequest() throw() {
}


void BatchNotifyRequest::__set_device_id_list(const std::vector<std::string> & val) {
  this->device_id_list = val;
}

void BatchNotifyRequest::__set_notify(const Notify& val) {
  this->notify = val;
}

void BatchNotifyRequest::__set_device_type(const int32_t val) {
  this->device_type = val;
}

void BatchNotifyRequest::__set_push_task_id(const int32_t val) {
  this->push_task_id = val;
}

void BatchNotifyRequest::__set_send_time(const int32_t val) {
  this->send_time = val;
}

const char* BatchNotifyRequest::ascii_fingerprint = "9A4EA7C08FDDEF0AE55C79D69E6A925C";
const uint8_t BatchNotifyRequest::binary_fingerprint[16] = {0x9A,0x4E,0xA7,0xC0,0x8F,0xDD,0xEF,0x0A,0xE5,0x5C,0x79,0xD6,0x9E,0x6A,0x92,0x5C};

uint32_t BatchNotifyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_device_id_list = false;
  bool isset_notify = false;
  bool isset_device_type = false;
  bool isset_push_task_id = false;
  bool isset_send_time = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->device_id_list.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->device_id_list.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += iprot->readString(this->device_id_list[_i8]);
            }
            xfer += iprot->readListEnd();
          }
          isset_device_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notify.read(iprot);
          isset_notify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->device_type);
          isset_device_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->push_task_id);
          isset_push_task_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->send_time);
          isset_send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_device_id_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_notify)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_device_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_push_task_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_send_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BatchNotifyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BatchNotifyRequest");

  xfer += oprot->writeFieldBegin("device_id_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->device_id_list.size()));
    std::vector<std::string> ::const_iterator _iter9;
    for (_iter9 = this->device_id_list.begin(); _iter9 != this->device_id_list.end(); ++_iter9)
    {
      xfer += oprot->writeString((*_iter9));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("notify", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->notify.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device_type", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->device_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("push_task_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->push_task_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->send_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BatchNotifyRequest &a, BatchNotifyRequest &b) {
  using ::std::swap;
  swap(a.device_id_list, b.device_id_list);
  swap(a.notify, b.notify);
  swap(a.device_type, b.device_type);
  swap(a.push_task_id, b.push_task_id);
  swap(a.send_time, b.send_time);
}

BatchNotifyRequest::BatchNotifyRequest(const BatchNotifyRequest& other10) {
  device_id_list = other10.device_id_list;
  notify = other10.notify;
  device_type = other10.device_type;
  push_task_id = other10.push_task_id;
  send_time = other10.send_time;
}
BatchNotifyRequest& BatchNotifyRequest::operator=(const BatchNotifyRequest& other11) {
  device_id_list = other11.device_id_list;
  notify = other11.notify;
  device_type = other11.device_type;
  push_task_id = other11.push_task_id;
  send_time = other11.send_time;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BatchNotifyRequest& obj) {
  using apache::thrift::to_string;
  out << "BatchNotifyRequest(";
  out << "device_id_list=" << to_string(obj.device_id_list);
  out << ", " << "notify=" << to_string(obj.notify);
  out << ", " << "device_type=" << to_string(obj.device_type);
  out << ", " << "push_task_id=" << to_string(obj.push_task_id);
  out << ", " << "send_time=" << to_string(obj.send_time);
  out << ")";
  return out;
}


BroadcastRequest::~BroadcastRequest() throw() {
}


void BroadcastRequest::__set_notify(const Notify& val) {
  this->notify = val;
}

void BroadcastRequest::__set_send_time(const int32_t val) {
  this->send_time = val;
}

void BroadcastRequest::__set_push_task_id(const int32_t val) {
  this->push_task_id = val;
}

void BroadcastRequest::__set_device_type(const int32_t val) {
  this->device_type = val;
}

const char* BroadcastRequest::ascii_fingerprint = "C3E7EF15CF5E859F4E977C9B69809F05";
const uint8_t BroadcastRequest::binary_fingerprint[16] = {0xC3,0xE7,0xEF,0x15,0xCF,0x5E,0x85,0x9F,0x4E,0x97,0x7C,0x9B,0x69,0x80,0x9F,0x05};

uint32_t BroadcastRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_notify = false;
  bool isset_send_time = false;
  bool isset_push_task_id = false;
  bool isset_device_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notify.read(iprot);
          isset_notify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->send_time);
          isset_send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->push_task_id);
          isset_push_task_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->device_type);
          isset_device_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_notify)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_send_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_push_task_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_device_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BroadcastRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("BroadcastRequest");

  xfer += oprot->writeFieldBegin("notify", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->notify.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->send_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("push_task_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->push_task_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device_type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->device_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(BroadcastRequest &a, BroadcastRequest &b) {
  using ::std::swap;
  swap(a.notify, b.notify);
  swap(a.send_time, b.send_time);
  swap(a.push_task_id, b.push_task_id);
  swap(a.device_type, b.device_type);
}

BroadcastRequest::BroadcastRequest(const BroadcastRequest& other12) {
  notify = other12.notify;
  send_time = other12.send_time;
  push_task_id = other12.push_task_id;
  device_type = other12.device_type;
}
BroadcastRequest& BroadcastRequest::operator=(const BroadcastRequest& other13) {
  notify = other13.notify;
  send_time = other13.send_time;
  push_task_id = other13.push_task_id;
  device_type = other13.device_type;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const BroadcastRequest& obj) {
  using apache::thrift::to_string;
  out << "BroadcastRequest(";
  out << "notify=" << to_string(obj.notify);
  out << ", " << "send_time=" << to_string(obj.send_time);
  out << ", " << "push_task_id=" << to_string(obj.push_task_id);
  out << ", " << "device_type=" << to_string(obj.device_type);
  out << ")";
  return out;
}


TagRequest::~TagRequest() throw() {
}


void TagRequest::__set_uid(const int32_t val) {
  this->uid = val;
}

void TagRequest::__set_xg_device_token(const std::string& val) {
  this->xg_device_token = val;
}

void TagRequest::__set_op(const int32_t val) {
  this->op = val;
}

void TagRequest::__set_tag_list(const std::vector<std::string> & val) {
  this->tag_list = val;
}

const char* TagRequest::ascii_fingerprint = "8630C9D736B7927C3AB90D8E0D7E4064";
const uint8_t TagRequest::binary_fingerprint[16] = {0x86,0x30,0xC9,0xD7,0x36,0xB7,0x92,0x7C,0x3A,0xB9,0x0D,0x8E,0x0D,0x7E,0x40,0x64};

uint32_t TagRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset_xg_device_token = false;
  bool isset_op = false;
  bool isset_tag_list = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->xg_device_token);
          isset_xg_device_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->op);
          isset_op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tag_list.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->tag_list.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readString(this->tag_list[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          isset_tag_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_xg_device_token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_tag_list)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TagRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TagRequest");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xg_device_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->xg_device_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag_list", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tag_list.size()));
    std::vector<std::string> ::const_iterator _iter19;
    for (_iter19 = this->tag_list.begin(); _iter19 != this->tag_list.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TagRequest &a, TagRequest &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.xg_device_token, b.xg_device_token);
  swap(a.op, b.op);
  swap(a.tag_list, b.tag_list);
}

TagRequest::TagRequest(const TagRequest& other20) {
  uid = other20.uid;
  xg_device_token = other20.xg_device_token;
  op = other20.op;
  tag_list = other20.tag_list;
}
TagRequest& TagRequest::operator=(const TagRequest& other21) {
  uid = other21.uid;
  xg_device_token = other21.xg_device_token;
  op = other21.op;
  tag_list = other21.tag_list;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TagRequest& obj) {
  using apache::thrift::to_string;
  out << "TagRequest(";
  out << "uid=" << to_string(obj.uid);
  out << ", " << "xg_device_token=" << to_string(obj.xg_device_token);
  out << ", " << "op=" << to_string(obj.op);
  out << ", " << "tag_list=" << to_string(obj.tag_list);
  out << ")";
  return out;
}


ConditionPushRequest::~ConditionPushRequest() throw() {
}


void ConditionPushRequest::__set_notify(const Notify& val) {
  this->notify = val;
}

void ConditionPushRequest::__set_device_type(const int32_t val) {
  this->device_type = val;
}

void ConditionPushRequest::__set_city(const std::string& val) {
  this->city = val;
}

void ConditionPushRequest::__set_school(const std::string& val) {
  this->school = val;
}

void ConditionPushRequest::__set_ukind_verify(const std::string& val) {
  this->ukind_verify = val;
}

void ConditionPushRequest::__set_send_time(const int32_t val) {
  this->send_time = val;
}

void ConditionPushRequest::__set_push_task_id(const int32_t val) {
  this->push_task_id = val;
}

const char* ConditionPushRequest::ascii_fingerprint = "4D97F45FF1C7DDBDFA9D1B5EA54DBA81";
const uint8_t ConditionPushRequest::binary_fingerprint[16] = {0x4D,0x97,0xF4,0x5F,0xF1,0xC7,0xDD,0xBD,0xFA,0x9D,0x1B,0x5E,0xA5,0x4D,0xBA,0x81};

uint32_t ConditionPushRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_notify = false;
  bool isset_device_type = false;
  bool isset_city = false;
  bool isset_school = false;
  bool isset_ukind_verify = false;
  bool isset_send_time = false;
  bool isset_push_task_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->notify.read(iprot);
          isset_notify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->device_type);
          isset_device_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city);
          isset_city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->school);
          isset_school = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ukind_verify);
          isset_ukind_verify = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->send_time);
          isset_send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->push_task_id);
          isset_push_task_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_notify)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_device_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_city)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_school)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ukind_verify)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_send_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_push_task_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ConditionPushRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ConditionPushRequest");

  xfer += oprot->writeFieldBegin("notify", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->notify.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->device_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->city);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("school", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->school);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ukind_verify", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ukind_verify);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->send_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("push_task_id", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->push_task_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ConditionPushRequest &a, ConditionPushRequest &b) {
  using ::std::swap;
  swap(a.notify, b.notify);
  swap(a.device_type, b.device_type);
  swap(a.city, b.city);
  swap(a.school, b.school);
  swap(a.ukind_verify, b.ukind_verify);
  swap(a.send_time, b.send_time);
  swap(a.push_task_id, b.push_task_id);
}

ConditionPushRequest::ConditionPushRequest(const ConditionPushRequest& other22) {
  notify = other22.notify;
  device_type = other22.device_type;
  city = other22.city;
  school = other22.school;
  ukind_verify = other22.ukind_verify;
  send_time = other22.send_time;
  push_task_id = other22.push_task_id;
}
ConditionPushRequest& ConditionPushRequest::operator=(const ConditionPushRequest& other23) {
  notify = other23.notify;
  device_type = other23.device_type;
  city = other23.city;
  school = other23.school;
  ukind_verify = other23.ukind_verify;
  send_time = other23.send_time;
  push_task_id = other23.push_task_id;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ConditionPushRequest& obj) {
  using apache::thrift::to_string;
  out << "ConditionPushRequest(";
  out << "notify=" << to_string(obj.notify);
  out << ", " << "device_type=" << to_string(obj.device_type);
  out << ", " << "city=" << to_string(obj.city);
  out << ", " << "school=" << to_string(obj.school);
  out << ", " << "ukind_verify=" << to_string(obj.ukind_verify);
  out << ", " << "send_time=" << to_string(obj.send_time);
  out << ", " << "push_task_id=" << to_string(obj.push_task_id);
  out << ")";
  return out;
}

} // namespace
