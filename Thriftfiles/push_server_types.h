/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef push_server_TYPES_H
#define push_server_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace tis {

struct NotifyType {
  enum type {
    INDEX = 1,
    WAP = 2,
    COMMUNITY_DETAIL = 3,
    FRIEND = 4,
    PRIVATE_MSG = 5,
    SYSTEM_MSG = 6
  };
};

extern const std::map<int, const char*> _NotifyType_VALUES_TO_NAMES;

struct InfoType {
  enum type {
    INDEX = 1,
    COMMUNITY = 2,
    PRIVATE_MSG = 4,
    NEW_FRIEND = 5,
    MY_MSG = 6
  };
};

extern const std::map<int, const char*> _InfoType_VALUES_TO_NAMES;

struct DeviceType {
  enum type {
    ANDROID = 1,
    IOS = 2
  };
};

extern const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES;

class Notify;

class Info;

class SingleNotifyRequest;

class BatchNotifyRequest;

class BatchInfoRequest;

class BroadcastRequest;

class AdminNotifyRequest;

class InvalidParamException;


class Notify {
 public:

  static const char* ascii_fingerprint; // = "54E7F89931576CA0EA7FDD572B1F6F70";
  static const uint8_t binary_fingerprint[16]; // = {0x54,0xE7,0xF8,0x99,0x31,0x57,0x6C,0xA0,0xEA,0x7F,0xDD,0x57,0x2B,0x1F,0x6F,0x70};

  Notify(const Notify&);
  Notify& operator=(const Notify&);
  Notify() : type(0), content(), title(""), url(""), tid(0), uid(0) {
  }

  virtual ~Notify() throw();
  int32_t type;
  std::string content;
  std::string title;
  std::string url;
  int32_t tid;
  int32_t uid;

  void __set_type(const int32_t val);

  void __set_content(const std::string& val);

  void __set_title(const std::string& val);

  void __set_url(const std::string& val);

  void __set_tid(const int32_t val);

  void __set_uid(const int32_t val);

  bool operator == (const Notify & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(tid == rhs.tid))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const Notify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Notify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Notify& obj);
};

void swap(Notify &a, Notify &b);


class Info {
 public:

  static const char* ascii_fingerprint; // = "AD5E8581BBE4C3CDE5FC5930DA3DD601";
  static const uint8_t binary_fingerprint[16]; // = {0xAD,0x5E,0x85,0x81,0xBB,0xE4,0xC3,0xCD,0xE5,0xFC,0x59,0x30,0xDA,0x3D,0xD6,0x01};

  Info(const Info&);
  Info& operator=(const Info&);
  Info() : type(0), device_id(), num(-1), uid(0) {
  }

  virtual ~Info() throw();
  int32_t type;
  std::string device_id;
  int32_t num;
  int32_t uid;

  void __set_type(const int32_t val);

  void __set_device_id(const std::string& val);

  void __set_num(const int32_t val);

  void __set_uid(const int32_t val);

  bool operator == (const Info & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const Info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Info& obj);
};

void swap(Info &a, Info &b);


class SingleNotifyRequest {
 public:

  static const char* ascii_fingerprint; // = "8BEDB189560815C23D9C74B0F45DFFA0";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xED,0xB1,0x89,0x56,0x08,0x15,0xC2,0x3D,0x9C,0x74,0xB0,0xF4,0x5D,0xFF,0xA0};

  SingleNotifyRequest(const SingleNotifyRequest&);
  SingleNotifyRequest& operator=(const SingleNotifyRequest&);
  SingleNotifyRequest() : device_id(), device_type(0) {
  }

  virtual ~SingleNotifyRequest() throw();
  std::string device_id;
  Notify notify;
  int32_t device_type;

  void __set_device_id(const std::string& val);

  void __set_notify(const Notify& val);

  void __set_device_type(const int32_t val);

  bool operator == (const SingleNotifyRequest & rhs) const
  {
    if (!(device_id == rhs.device_id))
      return false;
    if (!(notify == rhs.notify))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    return true;
  }
  bool operator != (const SingleNotifyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SingleNotifyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SingleNotifyRequest& obj);
};

void swap(SingleNotifyRequest &a, SingleNotifyRequest &b);


class BatchNotifyRequest {
 public:

  static const char* ascii_fingerprint; // = "2F550C4B5CB27788B4770238355FE5A2";
  static const uint8_t binary_fingerprint[16]; // = {0x2F,0x55,0x0C,0x4B,0x5C,0xB2,0x77,0x88,0xB4,0x77,0x02,0x38,0x35,0x5F,0xE5,0xA2};

  BatchNotifyRequest(const BatchNotifyRequest&);
  BatchNotifyRequest& operator=(const BatchNotifyRequest&);
  BatchNotifyRequest() : device_type(0), push_task_id(0), send_time(1426897707) {
  }

  virtual ~BatchNotifyRequest() throw();
  std::vector<std::string>  device_id_list;
  Notify notify;
  int32_t device_type;
  int32_t push_task_id;
  int32_t send_time;

  void __set_device_id_list(const std::vector<std::string> & val);

  void __set_notify(const Notify& val);

  void __set_device_type(const int32_t val);

  void __set_push_task_id(const int32_t val);

  void __set_send_time(const int32_t val);

  bool operator == (const BatchNotifyRequest & rhs) const
  {
    if (!(device_id_list == rhs.device_id_list))
      return false;
    if (!(notify == rhs.notify))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(push_task_id == rhs.push_task_id))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    return true;
  }
  bool operator != (const BatchNotifyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchNotifyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchNotifyRequest& obj);
};

void swap(BatchNotifyRequest &a, BatchNotifyRequest &b);


class BatchInfoRequest {
 public:

  static const char* ascii_fingerprint; // = "391C28D3226FBD3FCA1AB6FEE7917575";
  static const uint8_t binary_fingerprint[16]; // = {0x39,0x1C,0x28,0xD3,0x22,0x6F,0xBD,0x3F,0xCA,0x1A,0xB6,0xFE,0xE7,0x91,0x75,0x75};

  BatchInfoRequest(const BatchInfoRequest&);
  BatchInfoRequest& operator=(const BatchInfoRequest&);
  BatchInfoRequest() : device_type(0) {
  }

  virtual ~BatchInfoRequest() throw();
  std::vector<Info>  info_list;
  int32_t device_type;

  void __set_info_list(const std::vector<Info> & val);

  void __set_device_type(const int32_t val);

  bool operator == (const BatchInfoRequest & rhs) const
  {
    if (!(info_list == rhs.info_list))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    return true;
  }
  bool operator != (const BatchInfoRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchInfoRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchInfoRequest& obj);
};

void swap(BatchInfoRequest &a, BatchInfoRequest &b);


class BroadcastRequest {
 public:

  static const char* ascii_fingerprint; // = "DF0CAEBB6F2D1BB128517CCCE5C215BF";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0x0C,0xAE,0xBB,0x6F,0x2D,0x1B,0xB1,0x28,0x51,0x7C,0xCC,0xE5,0xC2,0x15,0xBF};

  BroadcastRequest(const BroadcastRequest&);
  BroadcastRequest& operator=(const BroadcastRequest&);
  BroadcastRequest() : send_time(1426897707), push_task_id(0) {
  }

  virtual ~BroadcastRequest() throw();
  Notify notify;
  int32_t send_time;
  int32_t push_task_id;

  void __set_notify(const Notify& val);

  void __set_send_time(const int32_t val);

  void __set_push_task_id(const int32_t val);

  bool operator == (const BroadcastRequest & rhs) const
  {
    if (!(notify == rhs.notify))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(push_task_id == rhs.push_task_id))
      return false;
    return true;
  }
  bool operator != (const BroadcastRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BroadcastRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BroadcastRequest& obj);
};

void swap(BroadcastRequest &a, BroadcastRequest &b);


class AdminNotifyRequest {
 public:

  static const char* ascii_fingerprint; // = "25CA238F7F8E4D993802165C2172B80F";
  static const uint8_t binary_fingerprint[16]; // = {0x25,0xCA,0x23,0x8F,0x7F,0x8E,0x4D,0x99,0x38,0x02,0x16,0x5C,0x21,0x72,0xB8,0x0F};

  AdminNotifyRequest(const AdminNotifyRequest&);
  AdminNotifyRequest& operator=(const AdminNotifyRequest&);
  AdminNotifyRequest() : type(0), flow(0), from_uid(0), to_uid(0), ctime(0), mid(0) {
  }

  virtual ~AdminNotifyRequest() throw();
  int16_t type;
  int16_t flow;
  int32_t from_uid;
  int32_t to_uid;
  int32_t ctime;
  int32_t mid;

  void __set_type(const int16_t val);

  void __set_flow(const int16_t val);

  void __set_from_uid(const int32_t val);

  void __set_to_uid(const int32_t val);

  void __set_ctime(const int32_t val);

  void __set_mid(const int32_t val);

  bool operator == (const AdminNotifyRequest & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(flow == rhs.flow))
      return false;
    if (!(from_uid == rhs.from_uid))
      return false;
    if (!(to_uid == rhs.to_uid))
      return false;
    if (!(ctime == rhs.ctime))
      return false;
    if (!(mid == rhs.mid))
      return false;
    return true;
  }
  bool operator != (const AdminNotifyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdminNotifyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const AdminNotifyRequest& obj);
};

void swap(AdminNotifyRequest &a, AdminNotifyRequest &b);

typedef struct _InvalidParamException__isset {
  _InvalidParamException__isset() : errmsg(false), errcode(false) {}
  bool errmsg :1;
  bool errcode :1;
} _InvalidParamException__isset;

class InvalidParamException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  InvalidParamException(const InvalidParamException&);
  InvalidParamException& operator=(const InvalidParamException&);
  InvalidParamException() : errmsg(), errcode(0) {
  }

  virtual ~InvalidParamException() throw();
  std::string errmsg;
  int32_t errcode;

  _InvalidParamException__isset __isset;

  void __set_errmsg(const std::string& val);

  void __set_errcode(const int32_t val);

  bool operator == (const InvalidParamException & rhs) const
  {
    if (!(errmsg == rhs.errmsg))
      return false;
    if (!(errcode == rhs.errcode))
      return false;
    return true;
  }
  bool operator != (const InvalidParamException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidParamException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InvalidParamException& obj);
};

void swap(InvalidParamException &a, InvalidParamException &b);

} // namespace

#endif
