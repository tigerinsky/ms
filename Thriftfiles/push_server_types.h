/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef push_server_TYPES_H
#define push_server_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace tis {

struct LandingType {
  enum type {
    INDEX = 1,
    WAP = 2,
    COMMUNITY_DETAIL = 3,
    FRIEND = 4,
    PRIVATE_MSG = 5,
    SYSTEM_MSG = 6,
    USER = 7
  };
};

extern const std::map<int, const char*> _LandingType_VALUES_TO_NAMES;

struct MessageType {
  enum type {
    NOTIFY = 1,
    NOTIFYRED = 2,
    EMAILRED = 3
  };
};

extern const std::map<int, const char*> _MessageType_VALUES_TO_NAMES;

struct DeviceType {
  enum type {
    ANDROID = 1,
    IOS = 2
  };
};

extern const std::map<int, const char*> _DeviceType_VALUES_TO_NAMES;

class Notify;

class SingleNotifyRequest;

class BatchNotifyRequest;

class BroadcastRequest;

class TagRequest;

class ConditionPushRequest;


class Notify {
 public:

  static const char* ascii_fingerprint; // = "0B16BE0E889E92C128BB4AF0864A1587";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x16,0xBE,0x0E,0x88,0x9E,0x92,0xC1,0x28,0xBB,0x4A,0xF0,0x86,0x4A,0x15,0x87};

  Notify(const Notify&);
  Notify& operator=(const Notify&);
  Notify() : mtype(0), ltype(1), content(""), title(""), url(""), tid(0), uid(0), num(-1) {
  }

  virtual ~Notify() throw();
  int32_t mtype;
  int32_t ltype;
  std::string content;
  std::string title;
  std::string url;
  int32_t tid;
  int32_t uid;
  int32_t num;

  void __set_mtype(const int32_t val);

  void __set_ltype(const int32_t val);

  void __set_content(const std::string& val);

  void __set_title(const std::string& val);

  void __set_url(const std::string& val);

  void __set_tid(const int32_t val);

  void __set_uid(const int32_t val);

  void __set_num(const int32_t val);

  bool operator == (const Notify & rhs) const
  {
    if (!(mtype == rhs.mtype))
      return false;
    if (!(ltype == rhs.ltype))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(title == rhs.title))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(tid == rhs.tid))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const Notify &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Notify & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Notify& obj);
};

void swap(Notify &a, Notify &b);


class SingleNotifyRequest {
 public:

  static const char* ascii_fingerprint; // = "ABF94A58609F5D74998803834EF43F11";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0xF9,0x4A,0x58,0x60,0x9F,0x5D,0x74,0x99,0x88,0x03,0x83,0x4E,0xF4,0x3F,0x11};

  SingleNotifyRequest(const SingleNotifyRequest&);
  SingleNotifyRequest& operator=(const SingleNotifyRequest&);
  SingleNotifyRequest() : device_type(0), device_id() {
  }

  virtual ~SingleNotifyRequest() throw();
  Notify notify;
  int32_t device_type;
  std::string device_id;

  void __set_notify(const Notify& val);

  void __set_device_type(const int32_t val);

  void __set_device_id(const std::string& val);

  bool operator == (const SingleNotifyRequest & rhs) const
  {
    if (!(notify == rhs.notify))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(device_id == rhs.device_id))
      return false;
    return true;
  }
  bool operator != (const SingleNotifyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SingleNotifyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SingleNotifyRequest& obj);
};

void swap(SingleNotifyRequest &a, SingleNotifyRequest &b);


class BatchNotifyRequest {
 public:

  static const char* ascii_fingerprint; // = "9A4EA7C08FDDEF0AE55C79D69E6A925C";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x4E,0xA7,0xC0,0x8F,0xDD,0xEF,0x0A,0xE5,0x5C,0x79,0xD6,0x9E,0x6A,0x92,0x5C};

  BatchNotifyRequest(const BatchNotifyRequest&);
  BatchNotifyRequest& operator=(const BatchNotifyRequest&);
  BatchNotifyRequest() : device_type(0), push_task_id(0), send_time(1426897707) {
  }

  virtual ~BatchNotifyRequest() throw();
  std::vector<std::string>  device_id_list;
  Notify notify;
  int32_t device_type;
  int32_t push_task_id;
  int32_t send_time;

  void __set_device_id_list(const std::vector<std::string> & val);

  void __set_notify(const Notify& val);

  void __set_device_type(const int32_t val);

  void __set_push_task_id(const int32_t val);

  void __set_send_time(const int32_t val);

  bool operator == (const BatchNotifyRequest & rhs) const
  {
    if (!(device_id_list == rhs.device_id_list))
      return false;
    if (!(notify == rhs.notify))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(push_task_id == rhs.push_task_id))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    return true;
  }
  bool operator != (const BatchNotifyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BatchNotifyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BatchNotifyRequest& obj);
};

void swap(BatchNotifyRequest &a, BatchNotifyRequest &b);


class BroadcastRequest {
 public:

  static const char* ascii_fingerprint; // = "C3E7EF15CF5E859F4E977C9B69809F05";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xE7,0xEF,0x15,0xCF,0x5E,0x85,0x9F,0x4E,0x97,0x7C,0x9B,0x69,0x80,0x9F,0x05};

  BroadcastRequest(const BroadcastRequest&);
  BroadcastRequest& operator=(const BroadcastRequest&);
  BroadcastRequest() : send_time(1426897707), push_task_id(0), device_type(0) {
  }

  virtual ~BroadcastRequest() throw();
  Notify notify;
  int32_t send_time;
  int32_t push_task_id;
  int32_t device_type;

  void __set_notify(const Notify& val);

  void __set_send_time(const int32_t val);

  void __set_push_task_id(const int32_t val);

  void __set_device_type(const int32_t val);

  bool operator == (const BroadcastRequest & rhs) const
  {
    if (!(notify == rhs.notify))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(push_task_id == rhs.push_task_id))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    return true;
  }
  bool operator != (const BroadcastRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BroadcastRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const BroadcastRequest& obj);
};

void swap(BroadcastRequest &a, BroadcastRequest &b);


class TagRequest {
 public:

  static const char* ascii_fingerprint; // = "8630C9D736B7927C3AB90D8E0D7E4064";
  static const uint8_t binary_fingerprint[16]; // = {0x86,0x30,0xC9,0xD7,0x36,0xB7,0x92,0x7C,0x3A,0xB9,0x0D,0x8E,0x0D,0x7E,0x40,0x64};

  TagRequest(const TagRequest&);
  TagRequest& operator=(const TagRequest&);
  TagRequest() : uid(0), xg_device_token(""), op(0) {
  }

  virtual ~TagRequest() throw();
  int32_t uid;
  std::string xg_device_token;
  int32_t op;
  std::vector<std::string>  tag_list;

  void __set_uid(const int32_t val);

  void __set_xg_device_token(const std::string& val);

  void __set_op(const int32_t val);

  void __set_tag_list(const std::vector<std::string> & val);

  bool operator == (const TagRequest & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(xg_device_token == rhs.xg_device_token))
      return false;
    if (!(op == rhs.op))
      return false;
    if (!(tag_list == rhs.tag_list))
      return false;
    return true;
  }
  bool operator != (const TagRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TagRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TagRequest& obj);
};

void swap(TagRequest &a, TagRequest &b);


class ConditionPushRequest {
 public:

  static const char* ascii_fingerprint; // = "4D97F45FF1C7DDBDFA9D1B5EA54DBA81";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x97,0xF4,0x5F,0xF1,0xC7,0xDD,0xBD,0xFA,0x9D,0x1B,0x5E,0xA5,0x4D,0xBA,0x81};

  ConditionPushRequest(const ConditionPushRequest&);
  ConditionPushRequest& operator=(const ConditionPushRequest&);
  ConditionPushRequest() : device_type(0), city(), school(), ukind_verify(), send_time(1426897707), push_task_id(0) {
  }

  virtual ~ConditionPushRequest() throw();
  Notify notify;
  int32_t device_type;
  std::string city;
  std::string school;
  std::string ukind_verify;
  int32_t send_time;
  int32_t push_task_id;

  void __set_notify(const Notify& val);

  void __set_device_type(const int32_t val);

  void __set_city(const std::string& val);

  void __set_school(const std::string& val);

  void __set_ukind_verify(const std::string& val);

  void __set_send_time(const int32_t val);

  void __set_push_task_id(const int32_t val);

  bool operator == (const ConditionPushRequest & rhs) const
  {
    if (!(notify == rhs.notify))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(city == rhs.city))
      return false;
    if (!(school == rhs.school))
      return false;
    if (!(ukind_verify == rhs.ukind_verify))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(push_task_id == rhs.push_task_id))
      return false;
    return true;
  }
  bool operator != (const ConditionPushRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConditionPushRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ConditionPushRequest& obj);
};

void swap(ConditionPushRequest &a, ConditionPushRequest &b);

} // namespace

#endif
