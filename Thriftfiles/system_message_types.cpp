/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "system_message_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace tis {

int _kActionTypeValues[] = {
  ActionType::AT,
  ActionType::MAIL,
  ActionType::COMMENT,
  ActionType::COMMENT_REPLY,
  ActionType::COMMENT_DELETE,
  ActionType::FOLLOW,
  ActionType::PRAISE,
  ActionType::NEW_TWEET,
  ActionType::NEW_FRIEND,
  ActionType::MIS_AUTHENTED
};
const char* _kActionTypeNames[] = {
  "AT",
  "MAIL",
  "COMMENT",
  "COMMENT_REPLY",
  "COMMENT_DELETE",
  "FOLLOW",
  "PRAISE",
  "NEW_TWEET",
  "NEW_FRIEND",
  "MIS_AUTHENTED"
};
const std::map<int, const char*> _ActionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(10, _kActionTypeValues, _kActionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTweetTypeValues[] = {
  TweetType::INDEX,
  TweetType::COMMUNITY
};
const char* _kTweetTypeNames[] = {
  "INDEX",
  "COMMUNITY"
};
const std::map<int, const char*> _TweetType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTweetTypeValues, _kTweetTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


SystemMessage::~SystemMessage() throw() {
}


void SystemMessage::__set_from_uid(const int32_t val) {
  this->from_uid = val;
}

void SystemMessage::__set_action_type(const ActionType::type val) {
  this->action_type = val;
}

void SystemMessage::__set_to_uid(const std::vector<int32_t> & val) {
  this->to_uid = val;
}

void SystemMessage::__set_content_id(const int32_t val) {
  this->content_id = val;
__isset.content_id = true;
}

const char* SystemMessage::ascii_fingerprint = "01DB005331D442192D4B99F58695588E";
const uint8_t SystemMessage::binary_fingerprint[16] = {0x01,0xDB,0x00,0x53,0x31,0xD4,0x42,0x19,0x2D,0x4B,0x99,0xF5,0x86,0x95,0x58,0x8E};

uint32_t SystemMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_from_uid = false;
  bool isset_action_type = false;
  bool isset_to_uid = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->from_uid);
          isset_from_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->action_type = (ActionType::type)ecast0;
          isset_action_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->to_uid.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->to_uid.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readI32(this->to_uid[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          isset_to_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->content_id);
          this->__isset.content_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_from_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_action_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_to_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SystemMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SystemMessage");

  xfer += oprot->writeFieldBegin("from_uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->from_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("action_type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->action_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("to_uid", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->to_uid.size()));
    std::vector<int32_t> ::const_iterator _iter6;
    for (_iter6 = this->to_uid.begin(); _iter6 != this->to_uid.end(); ++_iter6)
    {
      xfer += oprot->writeI32((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.content_id) {
    xfer += oprot->writeFieldBegin("content_id", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->content_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SystemMessage &a, SystemMessage &b) {
  using ::std::swap;
  swap(a.from_uid, b.from_uid);
  swap(a.action_type, b.action_type);
  swap(a.to_uid, b.to_uid);
  swap(a.content_id, b.content_id);
  swap(a.__isset, b.__isset);
}

SystemMessage::SystemMessage(const SystemMessage& other7) {
  from_uid = other7.from_uid;
  action_type = other7.action_type;
  to_uid = other7.to_uid;
  content_id = other7.content_id;
  __isset = other7.__isset;
}
SystemMessage& SystemMessage::operator=(const SystemMessage& other8) {
  from_uid = other8.from_uid;
  action_type = other8.action_type;
  to_uid = other8.to_uid;
  content_id = other8.content_id;
  __isset = other8.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SystemMessage& obj) {
  using apache::thrift::to_string;
  out << "SystemMessage(";
  out << "from_uid=" << to_string(obj.from_uid);
  out << ", " << "action_type=" << to_string(obj.action_type);
  out << ", " << "to_uid=" << to_string(obj.to_uid);
  out << ", " << "content_id="; (obj.__isset.content_id ? (out << to_string(obj.content_id)) : (out << "<null>"));
  out << ")";
  return out;
}


NewTweetNotifyRequest::~NewTweetNotifyRequest() throw() {
}


void NewTweetNotifyRequest::__set_uids(const std::vector<int32_t> & val) {
  this->uids = val;
}

void NewTweetNotifyRequest::__set_type(const TweetType::type val) {
  this->type = val;
}

void NewTweetNotifyRequest::__set_tid(const int32_t val) {
  this->tid = val;
__isset.tid = true;
}

const char* NewTweetNotifyRequest::ascii_fingerprint = "EB404622263E1FC4770C84236439D05A";
const uint8_t NewTweetNotifyRequest::binary_fingerprint[16] = {0xEB,0x40,0x46,0x22,0x26,0x3E,0x1F,0xC4,0x77,0x0C,0x84,0x23,0x64,0x39,0xD0,0x5A};

uint32_t NewTweetNotifyRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uids = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uids.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->uids.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += iprot->readI32(this->uids[_i13]);
            }
            xfer += iprot->readListEnd();
          }
          isset_uids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->type = (TweetType::type)ecast14;
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NewTweetNotifyRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NewTweetNotifyRequest");

  xfer += oprot->writeFieldBegin("uids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->uids.size()));
    std::vector<int32_t> ::const_iterator _iter15;
    for (_iter15 = this->uids.begin(); _iter15 != this->uids.end(); ++_iter15)
    {
      xfer += oprot->writeI32((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tid) {
    xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->tid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NewTweetNotifyRequest &a, NewTweetNotifyRequest &b) {
  using ::std::swap;
  swap(a.uids, b.uids);
  swap(a.type, b.type);
  swap(a.tid, b.tid);
  swap(a.__isset, b.__isset);
}

NewTweetNotifyRequest::NewTweetNotifyRequest(const NewTweetNotifyRequest& other16) {
  uids = other16.uids;
  type = other16.type;
  tid = other16.tid;
  __isset = other16.__isset;
}
NewTweetNotifyRequest& NewTweetNotifyRequest::operator=(const NewTweetNotifyRequest& other17) {
  uids = other17.uids;
  type = other17.type;
  tid = other17.tid;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NewTweetNotifyRequest& obj) {
  using apache::thrift::to_string;
  out << "NewTweetNotifyRequest(";
  out << "uids=" << to_string(obj.uids);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "tid="; (obj.__isset.tid ? (out << to_string(obj.tid)) : (out << "<null>"));
  out << ")";
  return out;
}


NoticeRequest::~NoticeRequest() throw() {
}


void NoticeRequest::__set_title(const std::string& val) {
  this->title = val;
}

void NoticeRequest::__set_content(const std::string& val) {
  this->content = val;
}

void NoticeRequest::__set_industry_id(const int32_t val) {
  this->industry_id = val;
}

void NoticeRequest::__set_type(const int32_t val) {
  this->type = val;
}

void NoticeRequest::__set_tid(const int32_t val) {
  this->tid = val;
__isset.tid = true;
}

void NoticeRequest::__set_url(const std::string& val) {
  this->url = val;
__isset.url = true;
}

void NoticeRequest::__set_send_time(const int32_t val) {
  this->send_time = val;
__isset.send_time = true;
}

void NoticeRequest::__set_push_task_id(const int32_t val) {
  this->push_task_id = val;
__isset.push_task_id = true;
}

const char* NoticeRequest::ascii_fingerprint = "766EF510B2AF085613E6B0E27DEB7D81";
const uint8_t NoticeRequest::binary_fingerprint[16] = {0x76,0x6E,0xF5,0x10,0xB2,0xAF,0x08,0x56,0x13,0xE6,0xB0,0xE2,0x7D,0xEB,0x7D,0x81};

uint32_t NoticeRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_title = false;
  bool isset_content = false;
  bool isset_industry_id = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          isset_title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          isset_content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->industry_id);
          isset_industry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tid);
          this->__isset.tid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->send_time);
          this->__isset.send_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->push_task_id);
          this->__isset.push_task_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_title)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_content)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_industry_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NoticeRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NoticeRequest");

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("industry_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->industry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tid) {
    xfer += oprot->writeFieldBegin("tid", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->tid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.url) {
    xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.send_time) {
    xfer += oprot->writeFieldBegin("send_time", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->send_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.push_task_id) {
    xfer += oprot->writeFieldBegin("push_task_id", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->push_task_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NoticeRequest &a, NoticeRequest &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.content, b.content);
  swap(a.industry_id, b.industry_id);
  swap(a.type, b.type);
  swap(a.tid, b.tid);
  swap(a.url, b.url);
  swap(a.send_time, b.send_time);
  swap(a.push_task_id, b.push_task_id);
  swap(a.__isset, b.__isset);
}

NoticeRequest::NoticeRequest(const NoticeRequest& other18) {
  title = other18.title;
  content = other18.content;
  industry_id = other18.industry_id;
  type = other18.type;
  tid = other18.tid;
  url = other18.url;
  send_time = other18.send_time;
  push_task_id = other18.push_task_id;
  __isset = other18.__isset;
}
NoticeRequest& NoticeRequest::operator=(const NoticeRequest& other19) {
  title = other19.title;
  content = other19.content;
  industry_id = other19.industry_id;
  type = other19.type;
  tid = other19.tid;
  url = other19.url;
  send_time = other19.send_time;
  push_task_id = other19.push_task_id;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NoticeRequest& obj) {
  using apache::thrift::to_string;
  out << "NoticeRequest(";
  out << "title=" << to_string(obj.title);
  out << ", " << "content=" << to_string(obj.content);
  out << ", " << "industry_id=" << to_string(obj.industry_id);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "tid="; (obj.__isset.tid ? (out << to_string(obj.tid)) : (out << "<null>"));
  out << ", " << "url="; (obj.__isset.url ? (out << to_string(obj.url)) : (out << "<null>"));
  out << ", " << "send_time="; (obj.__isset.send_time ? (out << to_string(obj.send_time)) : (out << "<null>"));
  out << ", " << "push_task_id="; (obj.__isset.push_task_id ? (out << to_string(obj.push_task_id)) : (out << "<null>"));
  out << ")";
  return out;
}


NewFriendRequest::~NewFriendRequest() throw() {
}


void NewFriendRequest::__set_to_uid(const int32_t val) {
  this->to_uid = val;
}

void NewFriendRequest::__set_rec_uids(const std::vector<int32_t> & val) {
  this->rec_uids = val;
}

const char* NewFriendRequest::ascii_fingerprint = "ACBC8ECF4940BD768FA35CCD08154770";
const uint8_t NewFriendRequest::binary_fingerprint[16] = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

uint32_t NewFriendRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_to_uid = false;
  bool isset_rec_uids = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->to_uid);
          isset_to_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rec_uids.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->rec_uids.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += iprot->readI32(this->rec_uids[_i24]);
            }
            xfer += iprot->readListEnd();
          }
          isset_rec_uids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_to_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rec_uids)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NewFriendRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NewFriendRequest");

  xfer += oprot->writeFieldBegin("to_uid", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->to_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rec_uids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->rec_uids.size()));
    std::vector<int32_t> ::const_iterator _iter25;
    for (_iter25 = this->rec_uids.begin(); _iter25 != this->rec_uids.end(); ++_iter25)
    {
      xfer += oprot->writeI32((*_iter25));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NewFriendRequest &a, NewFriendRequest &b) {
  using ::std::swap;
  swap(a.to_uid, b.to_uid);
  swap(a.rec_uids, b.rec_uids);
}

NewFriendRequest::NewFriendRequest(const NewFriendRequest& other26) {
  to_uid = other26.to_uid;
  rec_uids = other26.rec_uids;
}
NewFriendRequest& NewFriendRequest::operator=(const NewFriendRequest& other27) {
  to_uid = other27.to_uid;
  rec_uids = other27.rec_uids;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NewFriendRequest& obj) {
  using apache::thrift::to_string;
  out << "NewFriendRequest(";
  out << "to_uid=" << to_string(obj.to_uid);
  out << ", " << "rec_uids=" << to_string(obj.rec_uids);
  out << ")";
  return out;
}

} // namespace
