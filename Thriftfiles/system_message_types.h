/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef system_message_TYPES_H
#define system_message_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace tis {

struct ActionType {
  enum type {
    AT = 0,
    MAIL = 1,
    COMMENT = 2,
    COMMENT_REPLY = 3,
    COMMENT_DELETE = 4,
    FOLLOW = 5,
    PRAISE = 6,
    NEW_TWEET = 7,
    NEW_FRIEND = 8,
    MIS_AUTHENTED = 9
  };
};

extern const std::map<int, const char*> _ActionType_VALUES_TO_NAMES;

struct TweetType {
  enum type {
    INDEX = 1,
    COMMUNITY = 2
  };
};

extern const std::map<int, const char*> _TweetType_VALUES_TO_NAMES;

class SystemMessage;

class NewTweetNotifyRequest;

class MisRequest;

class NewFriendRequest;

typedef struct _SystemMessage__isset {
  _SystemMessage__isset() : content_id(true) {}
  bool content_id :1;
} _SystemMessage__isset;

class SystemMessage {
 public:

  static const char* ascii_fingerprint; // = "01DB005331D442192D4B99F58695588E";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0xDB,0x00,0x53,0x31,0xD4,0x42,0x19,0x2D,0x4B,0x99,0xF5,0x86,0x95,0x58,0x8E};

  SystemMessage(const SystemMessage&);
  SystemMessage& operator=(const SystemMessage&);
  SystemMessage() : from_uid(0), action_type((ActionType::type)0), content_id(0) {
  }

  virtual ~SystemMessage() throw();
  int32_t from_uid;
  ActionType::type action_type;
  std::vector<int32_t>  to_uid;
  int32_t content_id;

  _SystemMessage__isset __isset;

  void __set_from_uid(const int32_t val);

  void __set_action_type(const ActionType::type val);

  void __set_to_uid(const std::vector<int32_t> & val);

  void __set_content_id(const int32_t val);

  bool operator == (const SystemMessage & rhs) const
  {
    if (!(from_uid == rhs.from_uid))
      return false;
    if (!(action_type == rhs.action_type))
      return false;
    if (!(to_uid == rhs.to_uid))
      return false;
    if (__isset.content_id != rhs.__isset.content_id)
      return false;
    else if (__isset.content_id && !(content_id == rhs.content_id))
      return false;
    return true;
  }
  bool operator != (const SystemMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SystemMessage& obj);
};

void swap(SystemMessage &a, SystemMessage &b);

typedef struct _NewTweetNotifyRequest__isset {
  _NewTweetNotifyRequest__isset() : tid(false) {}
  bool tid :1;
} _NewTweetNotifyRequest__isset;

class NewTweetNotifyRequest {
 public:

  static const char* ascii_fingerprint; // = "EB404622263E1FC4770C84236439D05A";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x40,0x46,0x22,0x26,0x3E,0x1F,0xC4,0x77,0x0C,0x84,0x23,0x64,0x39,0xD0,0x5A};

  NewTweetNotifyRequest(const NewTweetNotifyRequest&);
  NewTweetNotifyRequest& operator=(const NewTweetNotifyRequest&);
  NewTweetNotifyRequest() : type((TweetType::type)0), tid(0) {
  }

  virtual ~NewTweetNotifyRequest() throw();
  std::vector<int32_t>  uids;
  TweetType::type type;
  int32_t tid;

  _NewTweetNotifyRequest__isset __isset;

  void __set_uids(const std::vector<int32_t> & val);

  void __set_type(const TweetType::type val);

  void __set_tid(const int32_t val);

  bool operator == (const NewTweetNotifyRequest & rhs) const
  {
    if (!(uids == rhs.uids))
      return false;
    if (!(type == rhs.type))
      return false;
    if (__isset.tid != rhs.__isset.tid)
      return false;
    else if (__isset.tid && !(tid == rhs.tid))
      return false;
    return true;
  }
  bool operator != (const NewTweetNotifyRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewTweetNotifyRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NewTweetNotifyRequest& obj);
};

void swap(NewTweetNotifyRequest &a, NewTweetNotifyRequest &b);


class MisRequest {
 public:

  static const char* ascii_fingerprint; // = "4FDE5F81A1EEA89BF972DEC3AC17B304";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0xDE,0x5F,0x81,0xA1,0xEE,0xA8,0x9B,0xF9,0x72,0xDE,0xC3,0xAC,0x17,0xB3,0x04};

  MisRequest(const MisRequest&);
  MisRequest& operator=(const MisRequest&);
  MisRequest() : title(""), content(), type(0), tid(0), url(""), send_time(0), push_task_id(0), device_type(0), city(), school(), ukind_verify(), is_broadcast(0) {
  }

  virtual ~MisRequest() throw();
  std::string title;
  std::string content;
  int32_t type;
  int32_t tid;
  std::string url;
  int32_t send_time;
  int32_t push_task_id;
  int32_t device_type;
  std::string city;
  std::string school;
  std::string ukind_verify;
  int32_t is_broadcast;

  void __set_title(const std::string& val);

  void __set_content(const std::string& val);

  void __set_type(const int32_t val);

  void __set_tid(const int32_t val);

  void __set_url(const std::string& val);

  void __set_send_time(const int32_t val);

  void __set_push_task_id(const int32_t val);

  void __set_device_type(const int32_t val);

  void __set_city(const std::string& val);

  void __set_school(const std::string& val);

  void __set_ukind_verify(const std::string& val);

  void __set_is_broadcast(const int32_t val);

  bool operator == (const MisRequest & rhs) const
  {
    if (!(title == rhs.title))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(tid == rhs.tid))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(send_time == rhs.send_time))
      return false;
    if (!(push_task_id == rhs.push_task_id))
      return false;
    if (!(device_type == rhs.device_type))
      return false;
    if (!(city == rhs.city))
      return false;
    if (!(school == rhs.school))
      return false;
    if (!(ukind_verify == rhs.ukind_verify))
      return false;
    if (!(is_broadcast == rhs.is_broadcast))
      return false;
    return true;
  }
  bool operator != (const MisRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MisRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MisRequest& obj);
};

void swap(MisRequest &a, MisRequest &b);


class NewFriendRequest {
 public:

  static const char* ascii_fingerprint; // = "ACBC8ECF4940BD768FA35CCD08154770";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

  NewFriendRequest(const NewFriendRequest&);
  NewFriendRequest& operator=(const NewFriendRequest&);
  NewFriendRequest() : to_uid(0) {
  }

  virtual ~NewFriendRequest() throw();
  int32_t to_uid;
  std::vector<int32_t>  rec_uids;

  void __set_to_uid(const int32_t val);

  void __set_rec_uids(const std::vector<int32_t> & val);

  bool operator == (const NewFriendRequest & rhs) const
  {
    if (!(to_uid == rhs.to_uid))
      return false;
    if (!(rec_uids == rhs.rec_uids))
      return false;
    return true;
  }
  bool operator != (const NewFriendRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NewFriendRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const NewFriendRequest& obj);
};

void swap(NewFriendRequest &a, NewFriendRequest &b);

} // namespace

#endif
